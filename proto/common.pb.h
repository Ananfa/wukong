// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace wukong {
namespace pb {
class BoolValue;
struct BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BoolValues;
struct BoolValuesDefaultTypeInternal;
extern BoolValuesDefaultTypeInternal _BoolValues_default_instance_;
class DataFragment;
struct DataFragmentDefaultTypeInternal;
extern DataFragmentDefaultTypeInternal _DataFragment_default_instance_;
class DataFragments;
struct DataFragmentsDefaultTypeInternal;
extern DataFragmentsDefaultTypeInternal _DataFragments_default_instance_;
class Int32Value;
struct Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int32Values;
struct Int32ValuesDefaultTypeInternal;
extern Int32ValuesDefaultTypeInternal _Int32Values_default_instance_;
class Int64Value;
struct Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class Int64Values;
struct Int64ValuesDefaultTypeInternal;
extern Int64ValuesDefaultTypeInternal _Int64Values_default_instance_;
class StringValue;
struct StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class StringValues;
struct StringValuesDefaultTypeInternal;
extern StringValuesDefaultTypeInternal _StringValues_default_instance_;
class Uint32Value;
struct Uint32ValueDefaultTypeInternal;
extern Uint32ValueDefaultTypeInternal _Uint32Value_default_instance_;
class Uint32Values;
struct Uint32ValuesDefaultTypeInternal;
extern Uint32ValuesDefaultTypeInternal _Uint32Values_default_instance_;
class Uint64Value;
struct Uint64ValueDefaultTypeInternal;
extern Uint64ValueDefaultTypeInternal _Uint64Value_default_instance_;
class Uint64Values;
struct Uint64ValuesDefaultTypeInternal;
extern Uint64ValuesDefaultTypeInternal _Uint64Values_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::BoolValue* Arena::CreateMaybeMessage<::wukong::pb::BoolValue>(Arena*);
template<> ::wukong::pb::BoolValues* Arena::CreateMaybeMessage<::wukong::pb::BoolValues>(Arena*);
template<> ::wukong::pb::DataFragment* Arena::CreateMaybeMessage<::wukong::pb::DataFragment>(Arena*);
template<> ::wukong::pb::DataFragments* Arena::CreateMaybeMessage<::wukong::pb::DataFragments>(Arena*);
template<> ::wukong::pb::Int32Value* Arena::CreateMaybeMessage<::wukong::pb::Int32Value>(Arena*);
template<> ::wukong::pb::Int32Values* Arena::CreateMaybeMessage<::wukong::pb::Int32Values>(Arena*);
template<> ::wukong::pb::Int64Value* Arena::CreateMaybeMessage<::wukong::pb::Int64Value>(Arena*);
template<> ::wukong::pb::Int64Values* Arena::CreateMaybeMessage<::wukong::pb::Int64Values>(Arena*);
template<> ::wukong::pb::StringValue* Arena::CreateMaybeMessage<::wukong::pb::StringValue>(Arena*);
template<> ::wukong::pb::StringValues* Arena::CreateMaybeMessage<::wukong::pb::StringValues>(Arena*);
template<> ::wukong::pb::Uint32Value* Arena::CreateMaybeMessage<::wukong::pb::Uint32Value>(Arena*);
template<> ::wukong::pb::Uint32Values* Arena::CreateMaybeMessage<::wukong::pb::Uint32Values>(Arena*);
template<> ::wukong::pb::Uint64Value* Arena::CreateMaybeMessage<::wukong::pb::Uint64Value>(Arena*);
template<> ::wukong::pb::Uint64Values* Arena::CreateMaybeMessage<::wukong::pb::Uint64Values>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class BoolValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.BoolValue) */ {
 public:
  inline BoolValue() : BoolValue(nullptr) {}
  ~BoolValue() override;
  explicit constexpr BoolValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolValue(const BoolValue& from);
  BoolValue(BoolValue&& from) noexcept
    : BoolValue() {
    *this = ::std::move(from);
  }

  inline BoolValue& operator=(const BoolValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolValue& operator=(BoolValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolValue* internal_default_instance() {
    return reinterpret_cast<const BoolValue*>(
               &_BoolValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoolValue& a, BoolValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolValue* New() const final {
    return new BoolValue();
  }

  BoolValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.BoolValue";
  }
  protected:
  explicit BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.BoolValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BoolValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.BoolValues) */ {
 public:
  inline BoolValues() : BoolValues(nullptr) {}
  ~BoolValues() override;
  explicit constexpr BoolValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolValues(const BoolValues& from);
  BoolValues(BoolValues&& from) noexcept
    : BoolValues() {
    *this = ::std::move(from);
  }

  inline BoolValues& operator=(const BoolValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolValues& operator=(BoolValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolValues* internal_default_instance() {
    return reinterpret_cast<const BoolValues*>(
               &_BoolValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoolValues& a, BoolValues& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolValues* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolValues* New() const final {
    return new BoolValues();
  }

  BoolValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.BoolValues";
  }
  protected:
  explicit BoolValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bool values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  bool _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_values() const;
  void _internal_add_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_values();
  public:
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wukong.pb.BoolValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Int32Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Int32Value) */ {
 public:
  inline Int32Value() : Int32Value(nullptr) {}
  ~Int32Value() override;
  explicit constexpr Int32Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Value(const Int32Value& from);
  Int32Value(Int32Value&& from) noexcept
    : Int32Value() {
    *this = ::std::move(from);
  }

  inline Int32Value& operator=(const Int32Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Value& operator=(Int32Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Value* internal_default_instance() {
    return reinterpret_cast<const Int32Value*>(
               &_Int32Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Int32Value& a, Int32Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Value* New() const final {
    return new Int32Value();
  }

  Int32Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int32Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Int32Value";
  }
  protected:
  explicit Int32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.Int32Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Int32Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Int32Values) */ {
 public:
  inline Int32Values() : Int32Values(nullptr) {}
  ~Int32Values() override;
  explicit constexpr Int32Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Values(const Int32Values& from);
  Int32Values(Int32Values&& from) noexcept
    : Int32Values() {
    *this = ::std::move(from);
  }

  inline Int32Values& operator=(const Int32Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Values& operator=(Int32Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Values* internal_default_instance() {
    return reinterpret_cast<const Int32Values*>(
               &_Int32Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int32Values& a, Int32Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Values* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Values* New() const final {
    return new Int32Values();
  }

  Int32Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int32Values& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Int32Values";
  }
  protected:
  explicit Int32Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wukong.pb.Int32Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Int64Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Int64Value) */ {
 public:
  inline Int64Value() : Int64Value(nullptr) {}
  ~Int64Value() override;
  explicit constexpr Int64Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Value(const Int64Value& from);
  Int64Value(Int64Value&& from) noexcept
    : Int64Value() {
    *this = ::std::move(from);
  }

  inline Int64Value& operator=(const Int64Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Value& operator=(Int64Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Value* internal_default_instance() {
    return reinterpret_cast<const Int64Value*>(
               &_Int64Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Int64Value& a, Int64Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Value* New() const final {
    return new Int64Value();
  }

  Int64Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int64Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Int64Value";
  }
  protected:
  explicit Int64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.Int64Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Int64Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Int64Values) */ {
 public:
  inline Int64Values() : Int64Values(nullptr) {}
  ~Int64Values() override;
  explicit constexpr Int64Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Values(const Int64Values& from);
  Int64Values(Int64Values&& from) noexcept
    : Int64Values() {
    *this = ::std::move(from);
  }

  inline Int64Values& operator=(const Int64Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Values& operator=(Int64Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Values* internal_default_instance() {
    return reinterpret_cast<const Int64Values*>(
               &_Int64Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Int64Values& a, Int64Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Values* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Values* New() const final {
    return new Int64Values();
  }

  Int64Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int64Values& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Int64Values";
  }
  protected:
  explicit Int64Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wukong.pb.Int64Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Uint32Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Uint32Value) */ {
 public:
  inline Uint32Value() : Uint32Value(nullptr) {}
  ~Uint32Value() override;
  explicit constexpr Uint32Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint32Value(const Uint32Value& from);
  Uint32Value(Uint32Value&& from) noexcept
    : Uint32Value() {
    *this = ::std::move(from);
  }

  inline Uint32Value& operator=(const Uint32Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint32Value& operator=(Uint32Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint32Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint32Value* internal_default_instance() {
    return reinterpret_cast<const Uint32Value*>(
               &_Uint32Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Uint32Value& a, Uint32Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint32Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint32Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint32Value* New() const final {
    return new Uint32Value();
  }

  Uint32Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint32Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint32Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint32Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint32Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Uint32Value";
  }
  protected:
  explicit Uint32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.Uint32Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Uint32Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Uint32Values) */ {
 public:
  inline Uint32Values() : Uint32Values(nullptr) {}
  ~Uint32Values() override;
  explicit constexpr Uint32Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint32Values(const Uint32Values& from);
  Uint32Values(Uint32Values&& from) noexcept
    : Uint32Values() {
    *this = ::std::move(from);
  }

  inline Uint32Values& operator=(const Uint32Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint32Values& operator=(Uint32Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint32Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint32Values* internal_default_instance() {
    return reinterpret_cast<const Uint32Values*>(
               &_Uint32Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Uint32Values& a, Uint32Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint32Values* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint32Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint32Values* New() const final {
    return new Uint32Values();
  }

  Uint32Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint32Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint32Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint32Values& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint32Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Uint32Values";
  }
  protected:
  explicit Uint32Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated uint32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wukong.pb.Uint32Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Uint64Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Uint64Value) */ {
 public:
  inline Uint64Value() : Uint64Value(nullptr) {}
  ~Uint64Value() override;
  explicit constexpr Uint64Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint64Value(const Uint64Value& from);
  Uint64Value(Uint64Value&& from) noexcept
    : Uint64Value() {
    *this = ::std::move(from);
  }

  inline Uint64Value& operator=(const Uint64Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint64Value& operator=(Uint64Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint64Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint64Value* internal_default_instance() {
    return reinterpret_cast<const Uint64Value*>(
               &_Uint64Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Uint64Value& a, Uint64Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint64Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint64Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint64Value* New() const final {
    return new Uint64Value();
  }

  Uint64Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint64Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint64Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint64Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Uint64Value";
  }
  protected:
  explicit Uint64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.Uint64Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Uint64Values final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.Uint64Values) */ {
 public:
  inline Uint64Values() : Uint64Values(nullptr) {}
  ~Uint64Values() override;
  explicit constexpr Uint64Values(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint64Values(const Uint64Values& from);
  Uint64Values(Uint64Values&& from) noexcept
    : Uint64Values() {
    *this = ::std::move(from);
  }

  inline Uint64Values& operator=(const Uint64Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint64Values& operator=(Uint64Values&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint64Values& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint64Values* internal_default_instance() {
    return reinterpret_cast<const Uint64Values*>(
               &_Uint64Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Uint64Values& a, Uint64Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint64Values* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint64Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint64Values* New() const final {
    return new Uint64Values();
  }

  Uint64Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint64Values>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint64Values& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint64Values& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.Uint64Values";
  }
  protected:
  explicit Uint64Values(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated uint64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:wukong.pb.Uint64Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class StringValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.StringValue) */ {
 public:
  inline StringValue() : StringValue(nullptr) {}
  ~StringValue() override;
  explicit constexpr StringValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringValue(const StringValue& from);
  StringValue(StringValue&& from) noexcept
    : StringValue() {
    *this = ::std::move(from);
  }

  inline StringValue& operator=(const StringValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringValue& operator=(StringValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringValue* internal_default_instance() {
    return reinterpret_cast<const StringValue*>(
               &_StringValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StringValue& a, StringValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StringValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringValue* New() const final {
    return new StringValue();
  }

  StringValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.StringValue";
  }
  protected:
  explicit StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.StringValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class StringValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.StringValues) */ {
 public:
  inline StringValues() : StringValues(nullptr) {}
  ~StringValues() override;
  explicit constexpr StringValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringValues(const StringValues& from);
  StringValues(StringValues&& from) noexcept
    : StringValues() {
    *this = ::std::move(from);
  }

  inline StringValues& operator=(const StringValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringValues& operator=(StringValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringValues* internal_default_instance() {
    return reinterpret_cast<const StringValues*>(
               &_StringValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StringValues& a, StringValues& b) {
    a.Swap(&b);
  }
  inline void Swap(StringValues* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringValues* New() const final {
    return new StringValues();
  }

  StringValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.StringValues";
  }
  protected:
  explicit StringValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.StringValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DataFragment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.DataFragment) */ {
 public:
  inline DataFragment() : DataFragment(nullptr) {}
  ~DataFragment() override;
  explicit constexpr DataFragment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFragment(const DataFragment& from);
  DataFragment(DataFragment&& from) noexcept
    : DataFragment() {
    *this = ::std::move(from);
  }

  inline DataFragment& operator=(const DataFragment& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFragment& operator=(DataFragment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataFragment& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFragment* internal_default_instance() {
    return reinterpret_cast<const DataFragment*>(
               &_DataFragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DataFragment& a, DataFragment& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFragment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFragment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataFragment* New() const final {
    return new DataFragment();
  }

  DataFragment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataFragment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataFragment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataFragment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFragment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.DataFragment";
  }
  protected:
  explicit DataFragment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragNameFieldNumber = 1,
    kFragDataFieldNumber = 2,
  };
  // string fragName = 1;
  void clear_fragname();
  const std::string& fragname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fragname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fragname();
  PROTOBUF_MUST_USE_RESULT std::string* release_fragname();
  void set_allocated_fragname(std::string* fragname);
  private:
  const std::string& _internal_fragname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fragname(const std::string& value);
  std::string* _internal_mutable_fragname();
  public:

  // bytes fragData = 2;
  void clear_fragdata();
  const std::string& fragdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fragdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fragdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_fragdata();
  void set_allocated_fragdata(std::string* fragdata);
  private:
  const std::string& _internal_fragdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fragdata(const std::string& value);
  std::string* _internal_mutable_fragdata();
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.DataFragment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fragname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fragdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DataFragments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.DataFragments) */ {
 public:
  inline DataFragments() : DataFragments(nullptr) {}
  ~DataFragments() override;
  explicit constexpr DataFragments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFragments(const DataFragments& from);
  DataFragments(DataFragments&& from) noexcept
    : DataFragments() {
    *this = ::std::move(from);
  }

  inline DataFragments& operator=(const DataFragments& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFragments& operator=(DataFragments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataFragments& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFragments* internal_default_instance() {
    return reinterpret_cast<const DataFragments*>(
               &_DataFragments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DataFragments& a, DataFragments& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFragments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFragments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataFragments* New() const final {
    return new DataFragments();
  }

  DataFragments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataFragments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataFragments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataFragments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFragments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.DataFragments";
  }
  protected:
  explicit DataFragments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragmentsFieldNumber = 1,
  };
  // repeated .wukong.pb.DataFragment fragments = 1;
  int fragments_size() const;
  private:
  int _internal_fragments_size() const;
  public:
  void clear_fragments();
  ::wukong::pb::DataFragment* mutable_fragments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::DataFragment >*
      mutable_fragments();
  private:
  const ::wukong::pb::DataFragment& _internal_fragments(int index) const;
  ::wukong::pb::DataFragment* _internal_add_fragments();
  public:
  const ::wukong::pb::DataFragment& fragments(int index) const;
  ::wukong::pb::DataFragment* add_fragments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::DataFragment >&
      fragments() const;

  // @@protoc_insertion_point(class_scope:wukong.pb.DataFragments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::DataFragment > fragments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoolValue

// bool value = 1;
inline void BoolValue::clear_value() {
  value_ = false;
}
inline bool BoolValue::_internal_value() const {
  return value_;
}
inline bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.BoolValue.value)
  return _internal_value();
}
inline void BoolValue::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void BoolValue::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wukong.pb.BoolValue.value)
}

// -------------------------------------------------------------------

// BoolValues

// repeated bool values = 1;
inline int BoolValues::_internal_values_size() const {
  return values_.size();
}
inline int BoolValues::values_size() const {
  return _internal_values_size();
}
inline void BoolValues::clear_values() {
  values_.Clear();
}
inline bool BoolValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline bool BoolValues::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.BoolValues.values)
  return _internal_values(index);
}
inline void BoolValues::set_values(int index, bool value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:wukong.pb.BoolValues.values)
}
inline void BoolValues::_internal_add_values(bool value) {
  values_.Add(value);
}
inline void BoolValues::add_values(bool value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:wukong.pb.BoolValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolValues::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolValues::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.BoolValues.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolValues::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.BoolValues.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Int32Value

// int32 value = 1;
inline void Int32Value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.Int32Value.value)
  return _internal_value();
}
inline void Int32Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Int32Value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wukong.pb.Int32Value.value)
}

// -------------------------------------------------------------------

// Int32Values

// repeated int32 values = 1;
inline int Int32Values::_internal_values_size() const {
  return values_.size();
}
inline int Int32Values::values_size() const {
  return _internal_values_size();
}
inline void Int32Values::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Values::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Values::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.Int32Values.values)
  return _internal_values(index);
}
inline void Int32Values::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:wukong.pb.Int32Values.values)
}
inline void Int32Values::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void Int32Values::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:wukong.pb.Int32Values.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Values::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Values::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.Int32Values.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Values::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.Int32Values.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Int64Value

// int64 value = 1;
inline void Int64Value::clear_value() {
  value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Value::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.Int64Value.value)
  return _internal_value();
}
inline void Int64Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Int64Value::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wukong.pb.Int64Value.value)
}

// -------------------------------------------------------------------

// Int64Values

// repeated int64 values = 1;
inline int Int64Values::_internal_values_size() const {
  return values_.size();
}
inline int Int64Values::values_size() const {
  return _internal_values_size();
}
inline void Int64Values::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Values::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Values::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.Int64Values.values)
  return _internal_values(index);
}
inline void Int64Values::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:wukong.pb.Int64Values.values)
}
inline void Int64Values::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void Int64Values::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:wukong.pb.Int64Values.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Values::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Values::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.Int64Values.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Values::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.Int64Values.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Uint32Value

// uint32 value = 1;
inline void Uint32Value::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Uint32Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Uint32Value::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.Uint32Value.value)
  return _internal_value();
}
inline void Uint32Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Uint32Value::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wukong.pb.Uint32Value.value)
}

// -------------------------------------------------------------------

// Uint32Values

// repeated uint32 values = 1;
inline int Uint32Values::_internal_values_size() const {
  return values_.size();
}
inline int Uint32Values::values_size() const {
  return _internal_values_size();
}
inline void Uint32Values::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Uint32Values::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Uint32Values::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.Uint32Values.values)
  return _internal_values(index);
}
inline void Uint32Values::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:wukong.pb.Uint32Values.values)
}
inline void Uint32Values::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Add(value);
}
inline void Uint32Values::add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:wukong.pb.Uint32Values.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Uint32Values::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Uint32Values::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.Uint32Values.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Uint32Values::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Uint32Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.Uint32Values.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Uint64Value

// uint64 value = 1;
inline void Uint64Value::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64Value::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.Uint64Value.value)
  return _internal_value();
}
inline void Uint64Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void Uint64Value::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wukong.pb.Uint64Value.value)
}

// -------------------------------------------------------------------

// Uint64Values

// repeated uint64 values = 1;
inline int Uint64Values::_internal_values_size() const {
  return values_.size();
}
inline int Uint64Values::values_size() const {
  return _internal_values_size();
}
inline void Uint64Values::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64Values::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64Values::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.Uint64Values.values)
  return _internal_values(index);
}
inline void Uint64Values::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:wukong.pb.Uint64Values.values)
}
inline void Uint64Values::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Add(value);
}
inline void Uint64Values::add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:wukong.pb.Uint64Values.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Uint64Values::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Uint64Values::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.Uint64Values.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Uint64Values::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Uint64Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.Uint64Values.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// StringValue

// string value = 1;
inline void StringValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StringValue::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.StringValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.StringValue.value)
}
inline std::string* StringValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:wukong.pb.StringValue.value)
  return _s;
}
inline const std::string& StringValue::_internal_value() const {
  return value_.Get();
}
inline void StringValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringValue::release_value() {
  // @@protoc_insertion_point(field_release:wukong.pb.StringValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.StringValue.value)
}

// -------------------------------------------------------------------

// StringValues

// repeated string values = 1;
inline int StringValues::_internal_values_size() const {
  return values_.size();
}
inline int StringValues::values_size() const {
  return _internal_values_size();
}
inline void StringValues::clear_values() {
  values_.Clear();
}
inline std::string* StringValues::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:wukong.pb.StringValues.values)
  return _s;
}
inline const std::string& StringValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& StringValues::values(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.StringValues.values)
  return _internal_values(index);
}
inline std::string* StringValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.StringValues.values)
  return values_.Mutable(index);
}
inline void StringValues::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:wukong.pb.StringValues.values)
}
inline void StringValues::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:wukong.pb.StringValues.values)
}
inline void StringValues::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wukong.pb.StringValues.values)
}
inline void StringValues::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wukong.pb.StringValues.values)
}
inline std::string* StringValues::_internal_add_values() {
  return values_.Add();
}
inline void StringValues::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wukong.pb.StringValues.values)
}
inline void StringValues::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:wukong.pb.StringValues.values)
}
inline void StringValues::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wukong.pb.StringValues.values)
}
inline void StringValues::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wukong.pb.StringValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringValues::values() const {
  // @@protoc_insertion_point(field_list:wukong.pb.StringValues.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.StringValues.values)
  return &values_;
}

// -------------------------------------------------------------------

// DataFragment

// string fragName = 1;
inline void DataFragment::clear_fragname() {
  fragname_.ClearToEmpty();
}
inline const std::string& DataFragment::fragname() const {
  // @@protoc_insertion_point(field_get:wukong.pb.DataFragment.fragName)
  return _internal_fragname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataFragment::set_fragname(ArgT0&& arg0, ArgT... args) {
 
 fragname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.DataFragment.fragName)
}
inline std::string* DataFragment::mutable_fragname() {
  std::string* _s = _internal_mutable_fragname();
  // @@protoc_insertion_point(field_mutable:wukong.pb.DataFragment.fragName)
  return _s;
}
inline const std::string& DataFragment::_internal_fragname() const {
  return fragname_.Get();
}
inline void DataFragment::_internal_set_fragname(const std::string& value) {
  
  fragname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataFragment::_internal_mutable_fragname() {
  
  return fragname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataFragment::release_fragname() {
  // @@protoc_insertion_point(field_release:wukong.pb.DataFragment.fragName)
  return fragname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataFragment::set_allocated_fragname(std::string* fragname) {
  if (fragname != nullptr) {
    
  } else {
    
  }
  fragname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fragname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.DataFragment.fragName)
}

// bytes fragData = 2;
inline void DataFragment::clear_fragdata() {
  fragdata_.ClearToEmpty();
}
inline const std::string& DataFragment::fragdata() const {
  // @@protoc_insertion_point(field_get:wukong.pb.DataFragment.fragData)
  return _internal_fragdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataFragment::set_fragdata(ArgT0&& arg0, ArgT... args) {
 
 fragdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.DataFragment.fragData)
}
inline std::string* DataFragment::mutable_fragdata() {
  std::string* _s = _internal_mutable_fragdata();
  // @@protoc_insertion_point(field_mutable:wukong.pb.DataFragment.fragData)
  return _s;
}
inline const std::string& DataFragment::_internal_fragdata() const {
  return fragdata_.Get();
}
inline void DataFragment::_internal_set_fragdata(const std::string& value) {
  
  fragdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataFragment::_internal_mutable_fragdata() {
  
  return fragdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataFragment::release_fragdata() {
  // @@protoc_insertion_point(field_release:wukong.pb.DataFragment.fragData)
  return fragdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataFragment::set_allocated_fragdata(std::string* fragdata) {
  if (fragdata != nullptr) {
    
  } else {
    
  }
  fragdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fragdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.DataFragment.fragData)
}

// -------------------------------------------------------------------

// DataFragments

// repeated .wukong.pb.DataFragment fragments = 1;
inline int DataFragments::_internal_fragments_size() const {
  return fragments_.size();
}
inline int DataFragments::fragments_size() const {
  return _internal_fragments_size();
}
inline void DataFragments::clear_fragments() {
  fragments_.Clear();
}
inline ::wukong::pb::DataFragment* DataFragments::mutable_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.DataFragments.fragments)
  return fragments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::DataFragment >*
DataFragments::mutable_fragments() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.DataFragments.fragments)
  return &fragments_;
}
inline const ::wukong::pb::DataFragment& DataFragments::_internal_fragments(int index) const {
  return fragments_.Get(index);
}
inline const ::wukong::pb::DataFragment& DataFragments::fragments(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.DataFragments.fragments)
  return _internal_fragments(index);
}
inline ::wukong::pb::DataFragment* DataFragments::_internal_add_fragments() {
  return fragments_.Add();
}
inline ::wukong::pb::DataFragment* DataFragments::add_fragments() {
  ::wukong::pb::DataFragment* _add = _internal_add_fragments();
  // @@protoc_insertion_point(field_add:wukong.pb.DataFragments.fragments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::DataFragment >&
DataFragments::fragments() const {
  // @@protoc_insertion_point(field_list:wukong.pb.DataFragments.fragments)
  return fragments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
