// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_service.proto

#include "scene_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wukong {
namespace pb {
constexpr LoadSceneRequest::LoadSceneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sceneid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , teamid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverid_(0u)
  , defid_(0u)
  , roleid_(0u){}
struct LoadSceneRequestDefaultTypeInternal {
  constexpr LoadSceneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadSceneRequestDefaultTypeInternal() {}
  union {
    LoadSceneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadSceneRequestDefaultTypeInternal _LoadSceneRequest_default_instance_;
constexpr LoadSceneResponse::LoadSceneResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sceneid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errcode_(0u){}
struct LoadSceneResponseDefaultTypeInternal {
  constexpr LoadSceneResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadSceneResponseDefaultTypeInternal() {}
  union {
    LoadSceneResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadSceneResponseDefaultTypeInternal _LoadSceneResponse_default_instance_;
constexpr EnterSceneRequest::EnterSceneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sceneid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverid_(0u)
  , userid_(0u)
  , roleid_(0u)
  , gatewayid_(0u){}
struct EnterSceneRequestDefaultTypeInternal {
  constexpr EnterSceneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterSceneRequestDefaultTypeInternal() {}
  union {
    EnterSceneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterSceneRequestDefaultTypeInternal _EnterSceneRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scene_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_scene_5fservice_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, defid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, sceneid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, roleid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneRequest, teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneResponse, errcode_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadSceneResponse, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, roleid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, gatewayid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::EnterSceneRequest, sceneid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wukong::pb::LoadSceneRequest)},
  { 10, -1, sizeof(::wukong::pb::LoadSceneResponse)},
  { 17, -1, sizeof(::wukong::pb::EnterSceneRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_LoadSceneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_LoadSceneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_EnterSceneRequest_default_instance_),
};

const char descriptor_table_protodef_scene_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023scene_service.proto\022\twukong.pb\032\022corpc_"
  "option.proto\032\014common.proto\032\022inner_common"
  ".proto\"d\n\020LoadSceneRequest\022\020\n\010serverId\030\001"
  " \001(\r\022\r\n\005defId\030\002 \001(\r\022\017\n\007sceneId\030\003 \001(\t\022\016\n\006"
  "roleId\030\004 \001(\r\022\016\n\006teamId\030\005 \001(\t\"5\n\021LoadScen"
  "eResponse\022\017\n\007errCode\030\001 \001(\r\022\017\n\007sceneId\030\002 "
  "\001(\t\"i\n\021EnterSceneRequest\022\020\n\010serverId\030\001 \001"
  "(\r\022\016\n\006userId\030\002 \001(\r\022\016\n\006roleId\030\003 \001(\r\022\021\n\tga"
  "tewayId\030\004 \001(\r\022\017\n\007sceneId\030\005 \001(\t2\224\002\n\014Scene"
  "Service\022*\n\010shutdown\022\013.corpc.Void\032\013.corpc"
  ".Void\"\004\230\361\004\001\022A\n\016getOnlineCount\022\013.corpc.Vo"
  "id\032\027.wukong.pb.OnlineCounts\"\t\220\361\004\001\240\361\004\350\007\022L"
  "\n\tloadScene\022\033.wukong.pb.LoadSceneRequest"
  "\032\034.wukong.pb.LoadSceneResponse\"\004\220\361\004\001\022A\n\n"
  "enterScene\022\034.wukong.pb.EnterSceneRequest"
  "\032\013.corpc.Void\"\010\230\361\004\001\250\361\004\001\032\004\200\361\004\0052\224\002\n\021InnerS"
  "ceneService\022*\n\010shutdown\022\013.corpc.Void\032\013.c"
  "orpc.Void\"\004\230\361\004\001\022<\n\016getOnlineCount\022\013.corp"
  "c.Void\032\026.wukong.pb.Uint32Value\"\005\240\361\004\364\003\022L\n"
  "\tloadScene\022\033.wukong.pb.LoadSceneRequest\032"
  "\034.wukong.pb.LoadSceneResponse\"\004\220\361\004\001\022A\n\ne"
  "nterScene\022\034.wukong.pb.EnterSceneRequest\032"
  "\013.corpc.Void\"\010\230\361\004\001\220\361\004\001\032\004\200\361\004\005B\003\200\001\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scene_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_corpc_5foption_2eproto,
  &::descriptor_table_inner_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fservice_2eproto = {
  false, false, 921, descriptor_table_protodef_scene_5fservice_2eproto, "scene_service.proto", 
  &descriptor_table_scene_5fservice_2eproto_once, descriptor_table_scene_5fservice_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_scene_5fservice_2eproto::offsets,
  file_level_metadata_scene_5fservice_2eproto, file_level_enum_descriptors_scene_5fservice_2eproto, file_level_service_descriptors_scene_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scene_5fservice_2eproto_getter() {
  return &descriptor_table_scene_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scene_5fservice_2eproto(&descriptor_table_scene_5fservice_2eproto);
namespace wukong {
namespace pb {

// ===================================================================

class LoadSceneRequest::_Internal {
 public:
};

LoadSceneRequest::LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.LoadSceneRequest)
}
LoadSceneRequest::LoadSceneRequest(const LoadSceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sceneid().empty()) {
    sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sceneid(), 
      GetArenaForAllocation());
  }
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_teamid().empty()) {
    teamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_teamid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(roleid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.LoadSceneRequest)
}

inline void LoadSceneRequest::SharedCtor() {
sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serverid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(roleid_));
}

LoadSceneRequest::~LoadSceneRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.LoadSceneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadSceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadSceneRequest::ArenaDtor(void* object) {
  LoadSceneRequest* _this = reinterpret_cast< LoadSceneRequest* >(object);
  (void)_this;
}
void LoadSceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_.ClearToEmpty();
  teamid_.ClearToEmpty();
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(roleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 defId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          defid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sceneId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.LoadSceneRequest.sceneId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 roleId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string teamId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.LoadSceneRequest.teamId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.LoadSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint32 defId = 2;
  if (this->_internal_defid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_defid(), target);
  }

  // string sceneId = 3;
  if (!this->_internal_sceneid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.LoadSceneRequest.sceneId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sceneid(), target);
  }

  // uint32 roleId = 4;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_roleid(), target);
  }

  // string teamId = 5;
  if (!this->_internal_teamid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.LoadSceneRequest.teamId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.LoadSceneRequest)
  return target;
}

size_t LoadSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.LoadSceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sceneId = 3;
  if (!this->_internal_sceneid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sceneid());
  }

  // string teamId = 5;
  if (!this->_internal_teamid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // uint32 defId = 2;
  if (this->_internal_defid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_defid());
  }

  // uint32 roleId = 4;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadSceneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadSceneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadSceneRequest::GetClassData() const { return &_class_data_; }

void LoadSceneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadSceneRequest *>(to)->MergeFrom(
      static_cast<const LoadSceneRequest &>(from));
}


void LoadSceneRequest::MergeFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.LoadSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sceneid().empty()) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (!from._internal_teamid().empty()) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_defid() != 0) {
    _internal_set_defid(from._internal_defid());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadSceneRequest::CopyFrom(const LoadSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.LoadSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneRequest::IsInitialized() const {
  return true;
}

void LoadSceneRequest::InternalSwap(LoadSceneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sceneid_, GetArenaForAllocation(),
      &other->sceneid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &teamid_, GetArenaForAllocation(),
      &other->teamid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadSceneRequest, roleid_)
      + sizeof(LoadSceneRequest::roleid_)
      - PROTOBUF_FIELD_OFFSET(LoadSceneRequest, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scene_5fservice_2eproto_getter, &descriptor_table_scene_5fservice_2eproto_once,
      file_level_metadata_scene_5fservice_2eproto[0]);
}

// ===================================================================

class LoadSceneResponse::_Internal {
 public:
};

LoadSceneResponse::LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.LoadSceneResponse)
}
LoadSceneResponse::LoadSceneResponse(const LoadSceneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sceneid().empty()) {
    sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sceneid(), 
      GetArenaForAllocation());
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:wukong.pb.LoadSceneResponse)
}

inline void LoadSceneResponse::SharedCtor() {
sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
errcode_ = 0u;
}

LoadSceneResponse::~LoadSceneResponse() {
  // @@protoc_insertion_point(destructor:wukong.pb.LoadSceneResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadSceneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadSceneResponse::ArenaDtor(void* object) {
  LoadSceneResponse* _this = reinterpret_cast< LoadSceneResponse* >(object);
  (void)_this;
}
void LoadSceneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_.ClearToEmpty();
  errcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sceneId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.LoadSceneResponse.sceneId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.LoadSceneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // string sceneId = 2;
  if (!this->_internal_sceneid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.LoadSceneResponse.sceneId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.LoadSceneResponse)
  return target;
}

size_t LoadSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.LoadSceneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sceneId = 2;
  if (!this->_internal_sceneid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sceneid());
  }

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadSceneResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadSceneResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadSceneResponse::GetClassData() const { return &_class_data_; }

void LoadSceneResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadSceneResponse *>(to)->MergeFrom(
      static_cast<const LoadSceneResponse &>(from));
}


void LoadSceneResponse::MergeFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.LoadSceneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sceneid().empty()) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from._internal_errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadSceneResponse::CopyFrom(const LoadSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.LoadSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneResponse::IsInitialized() const {
  return true;
}

void LoadSceneResponse::InternalSwap(LoadSceneResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sceneid_, GetArenaForAllocation(),
      &other->sceneid_, other->GetArenaForAllocation()
  );
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scene_5fservice_2eproto_getter, &descriptor_table_scene_5fservice_2eproto_once,
      file_level_metadata_scene_5fservice_2eproto[1]);
}

// ===================================================================

class EnterSceneRequest::_Internal {
 public:
};

EnterSceneRequest::EnterSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.EnterSceneRequest)
}
EnterSceneRequest::EnterSceneRequest(const EnterSceneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sceneid().empty()) {
    sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sceneid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gatewayid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(gatewayid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.EnterSceneRequest)
}

inline void EnterSceneRequest::SharedCtor() {
sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serverid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gatewayid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(gatewayid_));
}

EnterSceneRequest::~EnterSceneRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.EnterSceneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnterSceneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterSceneRequest::ArenaDtor(void* object) {
  EnterSceneRequest* _this = reinterpret_cast< EnterSceneRequest* >(object);
  (void)_this;
}
void EnterSceneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterSceneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnterSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.EnterSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_.ClearToEmpty();
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gatewayid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(gatewayid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterSceneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 roleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gatewayId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.EnterSceneRequest.sceneId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterSceneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.EnterSceneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint32 userId = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userid(), target);
  }

  // uint32 roleId = 3;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roleid(), target);
  }

  // uint32 gatewayId = 4;
  if (this->_internal_gatewayid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gatewayid(), target);
  }

  // string sceneId = 5;
  if (!this->_internal_sceneid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.EnterSceneRequest.sceneId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.EnterSceneRequest)
  return target;
}

size_t EnterSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.EnterSceneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sceneId = 5;
  if (!this->_internal_sceneid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sceneid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // uint32 userId = 2;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  // uint32 roleId = 3;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roleid());
  }

  // uint32 gatewayId = 4;
  if (this->_internal_gatewayid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gatewayid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterSceneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnterSceneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterSceneRequest::GetClassData() const { return &_class_data_; }

void EnterSceneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnterSceneRequest *>(to)->MergeFrom(
      static_cast<const EnterSceneRequest &>(from));
}


void EnterSceneRequest::MergeFrom(const EnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.EnterSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sceneid().empty()) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_gatewayid() != 0) {
    _internal_set_gatewayid(from._internal_gatewayid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterSceneRequest::CopyFrom(const EnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.EnterSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneRequest::IsInitialized() const {
  return true;
}

void EnterSceneRequest::InternalSwap(EnterSceneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sceneid_, GetArenaForAllocation(),
      &other->sceneid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterSceneRequest, gatewayid_)
      + sizeof(EnterSceneRequest::gatewayid_)
      - PROTOBUF_FIELD_OFFSET(EnterSceneRequest, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterSceneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scene_5fservice_2eproto_getter, &descriptor_table_scene_5fservice_2eproto_once,
      file_level_metadata_scene_5fservice_2eproto[2]);
}

// ===================================================================

SceneService::~SceneService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SceneService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fservice_2eproto);
  return file_level_service_descriptors_scene_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SceneService::GetDescriptor() {
  return descriptor();
}

void SceneService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void SceneService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::OnlineCounts*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void SceneService::loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::LoadSceneRequest*,
                         ::wukong::pb::LoadSceneResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loadScene() not implemented.");
  done->Run();
}

void SceneService::enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::EnterSceneRequest*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method enterScene() not implemented.");
  done->Run();
}

void SceneService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_scene_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::OnlineCounts*>(
                 response),
             done);
      break;
    case 2:
      loadScene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::LoadSceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::LoadSceneResponse*>(
                 response),
             done);
      break;
    case 3:
      enterScene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::EnterSceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SceneService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::corpc::Void::default_instance();
    case 2:
      return ::wukong::pb::LoadSceneRequest::default_instance();
    case 3:
      return ::wukong::pb::EnterSceneRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SceneService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::OnlineCounts::default_instance();
    case 2:
      return ::wukong::pb::LoadSceneResponse::default_instance();
    case 3:
      return ::corpc::Void::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SceneService_Stub::SceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SceneService_Stub::SceneService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SceneService_Stub::~SceneService_Stub() {
  if (owns_channel_) delete channel_;
}

void SceneService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SceneService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::OnlineCounts* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SceneService_Stub::loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::LoadSceneRequest* request,
                              ::wukong::pb::LoadSceneResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SceneService_Stub::enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::EnterSceneRequest* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

InnerSceneService::~InnerSceneService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerSceneService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fservice_2eproto);
  return file_level_service_descriptors_scene_5fservice_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerSceneService::GetDescriptor() {
  return descriptor();
}

void InnerSceneService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void InnerSceneService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::Uint32Value*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void InnerSceneService::loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::LoadSceneRequest*,
                         ::wukong::pb::LoadSceneResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loadScene() not implemented.");
  done->Run();
}

void InnerSceneService::enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::EnterSceneRequest*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method enterScene() not implemented.");
  done->Run();
}

void InnerSceneService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_scene_5fservice_2eproto[1]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::Uint32Value*>(
                 response),
             done);
      break;
    case 2:
      loadScene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::LoadSceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::LoadSceneResponse*>(
                 response),
             done);
      break;
    case 3:
      enterScene(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::EnterSceneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerSceneService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::corpc::Void::default_instance();
    case 2:
      return ::wukong::pb::LoadSceneRequest::default_instance();
    case 3:
      return ::wukong::pb::EnterSceneRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerSceneService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::Uint32Value::default_instance();
    case 2:
      return ::wukong::pb::LoadSceneResponse::default_instance();
    case 3:
      return ::corpc::Void::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InnerSceneService_Stub::InnerSceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InnerSceneService_Stub::InnerSceneService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
InnerSceneService_Stub::~InnerSceneService_Stub() {
  if (owns_channel_) delete channel_;
}

void InnerSceneService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void InnerSceneService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::Uint32Value* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void InnerSceneService_Stub::loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::LoadSceneRequest* request,
                              ::wukong::pb::LoadSceneResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void InnerSceneService_Stub::enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::EnterSceneRequest* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wukong::pb::LoadSceneRequest* Arena::CreateMaybeMessage< ::wukong::pb::LoadSceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::LoadSceneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::LoadSceneResponse* Arena::CreateMaybeMessage< ::wukong::pb::LoadSceneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::LoadSceneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::EnterSceneRequest* Arena::CreateMaybeMessage< ::wukong::pb::EnterSceneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::EnterSceneRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
