// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inner_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inner_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inner_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inner_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inner_5fcommon_2eproto;
namespace wukong {
namespace pb {
class GlobalEventMessage;
struct GlobalEventMessageDefaultTypeInternal;
extern GlobalEventMessageDefaultTypeInternal _GlobalEventMessage_default_instance_;
class OnlineCount;
struct OnlineCountDefaultTypeInternal;
extern OnlineCountDefaultTypeInternal _OnlineCount_default_instance_;
class OnlineCounts;
struct OnlineCountsDefaultTypeInternal;
extern OnlineCountsDefaultTypeInternal _OnlineCounts_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::GlobalEventMessage* Arena::CreateMaybeMessage<::wukong::pb::GlobalEventMessage>(Arena*);
template<> ::wukong::pb::OnlineCount* Arena::CreateMaybeMessage<::wukong::pb::OnlineCount>(Arena*);
template<> ::wukong::pb::OnlineCounts* Arena::CreateMaybeMessage<::wukong::pb::OnlineCounts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class OnlineCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.OnlineCount) */ {
 public:
  inline OnlineCount() : OnlineCount(nullptr) {}
  ~OnlineCount() override;
  explicit constexpr OnlineCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnlineCount(const OnlineCount& from);
  OnlineCount(OnlineCount&& from) noexcept
    : OnlineCount() {
    *this = ::std::move(from);
  }

  inline OnlineCount& operator=(const OnlineCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineCount& operator=(OnlineCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnlineCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnlineCount* internal_default_instance() {
    return reinterpret_cast<const OnlineCount*>(
               &_OnlineCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OnlineCount& a, OnlineCount& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineCount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineCount* New() const final {
    return new OnlineCount();
  }

  OnlineCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnlineCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnlineCount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.OnlineCount";
  }
  protected:
  explicit OnlineCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.OnlineCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inner_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class OnlineCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.OnlineCounts) */ {
 public:
  inline OnlineCounts() : OnlineCounts(nullptr) {}
  ~OnlineCounts() override;
  explicit constexpr OnlineCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnlineCounts(const OnlineCounts& from);
  OnlineCounts(OnlineCounts&& from) noexcept
    : OnlineCounts() {
    *this = ::std::move(from);
  }

  inline OnlineCounts& operator=(const OnlineCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineCounts& operator=(OnlineCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnlineCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnlineCounts* internal_default_instance() {
    return reinterpret_cast<const OnlineCounts*>(
               &_OnlineCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnlineCounts& a, OnlineCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineCounts* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineCounts* New() const final {
    return new OnlineCounts();
  }

  OnlineCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnlineCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnlineCounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineCounts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.OnlineCounts";
  }
  protected:
  explicit OnlineCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 1,
  };
  // repeated .wukong.pb.OnlineCount counts = 1;
  int counts_size() const;
  private:
  int _internal_counts_size() const;
  public:
  void clear_counts();
  ::wukong::pb::OnlineCount* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::OnlineCount >*
      mutable_counts();
  private:
  const ::wukong::pb::OnlineCount& _internal_counts(int index) const;
  ::wukong::pb::OnlineCount* _internal_add_counts();
  public:
  const ::wukong::pb::OnlineCount& counts(int index) const;
  ::wukong::pb::OnlineCount* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::OnlineCount >&
      counts() const;

  // @@protoc_insertion_point(class_scope:wukong.pb.OnlineCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::OnlineCount > counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inner_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class GlobalEventMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.GlobalEventMessage) */ {
 public:
  inline GlobalEventMessage() : GlobalEventMessage(nullptr) {}
  ~GlobalEventMessage() override;
  explicit constexpr GlobalEventMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalEventMessage(const GlobalEventMessage& from);
  GlobalEventMessage(GlobalEventMessage&& from) noexcept
    : GlobalEventMessage() {
    *this = ::std::move(from);
  }

  inline GlobalEventMessage& operator=(const GlobalEventMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalEventMessage& operator=(GlobalEventMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalEventMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalEventMessage* internal_default_instance() {
    return reinterpret_cast<const GlobalEventMessage*>(
               &_GlobalEventMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalEventMessage& a, GlobalEventMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalEventMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalEventMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalEventMessage* New() const final {
    return new GlobalEventMessage();
  }

  GlobalEventMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalEventMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalEventMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalEventMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalEventMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.GlobalEventMessage";
  }
  protected:
  explicit GlobalEventMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_MUST_USE_RESULT std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.GlobalEventMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inner_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnlineCount

// uint32 serverId = 1;
inline void OnlineCount::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnlineCount::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnlineCount::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.OnlineCount.serverId)
  return _internal_serverid();
}
inline void OnlineCount::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void OnlineCount::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.OnlineCount.serverId)
}

// int32 count = 2;
inline void OnlineCount::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineCount::count() const {
  // @@protoc_insertion_point(field_get:wukong.pb.OnlineCount.count)
  return _internal_count();
}
inline void OnlineCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void OnlineCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:wukong.pb.OnlineCount.count)
}

// -------------------------------------------------------------------

// OnlineCounts

// repeated .wukong.pb.OnlineCount counts = 1;
inline int OnlineCounts::_internal_counts_size() const {
  return counts_.size();
}
inline int OnlineCounts::counts_size() const {
  return _internal_counts_size();
}
inline void OnlineCounts::clear_counts() {
  counts_.Clear();
}
inline ::wukong::pb::OnlineCount* OnlineCounts::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.OnlineCounts.counts)
  return counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::OnlineCount >*
OnlineCounts::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.OnlineCounts.counts)
  return &counts_;
}
inline const ::wukong::pb::OnlineCount& OnlineCounts::_internal_counts(int index) const {
  return counts_.Get(index);
}
inline const ::wukong::pb::OnlineCount& OnlineCounts::counts(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.OnlineCounts.counts)
  return _internal_counts(index);
}
inline ::wukong::pb::OnlineCount* OnlineCounts::_internal_add_counts() {
  return counts_.Add();
}
inline ::wukong::pb::OnlineCount* OnlineCounts::add_counts() {
  ::wukong::pb::OnlineCount* _add = _internal_add_counts();
  // @@protoc_insertion_point(field_add:wukong.pb.OnlineCounts.counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::OnlineCount >&
OnlineCounts::counts() const {
  // @@protoc_insertion_point(field_list:wukong.pb.OnlineCounts.counts)
  return counts_;
}

// -------------------------------------------------------------------

// GlobalEventMessage

// string topic = 1;
inline void GlobalEventMessage::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& GlobalEventMessage::topic() const {
  // @@protoc_insertion_point(field_get:wukong.pb.GlobalEventMessage.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GlobalEventMessage::set_topic(ArgT0&& arg0, ArgT... args) {
 
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.GlobalEventMessage.topic)
}
inline std::string* GlobalEventMessage::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:wukong.pb.GlobalEventMessage.topic)
  return _s;
}
inline const std::string& GlobalEventMessage::_internal_topic() const {
  return topic_.Get();
}
inline void GlobalEventMessage::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GlobalEventMessage::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GlobalEventMessage::release_topic() {
  // @@protoc_insertion_point(field_release:wukong.pb.GlobalEventMessage.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GlobalEventMessage::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.GlobalEventMessage.topic)
}

// bytes data = 2;
inline void GlobalEventMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& GlobalEventMessage::data() const {
  // @@protoc_insertion_point(field_get:wukong.pb.GlobalEventMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GlobalEventMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.GlobalEventMessage.data)
}
inline std::string* GlobalEventMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:wukong.pb.GlobalEventMessage.data)
  return _s;
}
inline const std::string& GlobalEventMessage::_internal_data() const {
  return data_.Get();
}
inline void GlobalEventMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GlobalEventMessage::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GlobalEventMessage::release_data() {
  // @@protoc_insertion_point(field_release:wukong.pb.GlobalEventMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GlobalEventMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.GlobalEventMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inner_5fcommon_2eproto
