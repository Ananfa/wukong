// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gateway_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gateway_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
#include "common.pb.h"
#include "inner_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gateway_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gateway_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_5fservice_2eproto;
namespace wukong {
namespace pb {
class ForwardOutRequest;
struct ForwardOutRequestDefaultTypeInternal;
extern ForwardOutRequestDefaultTypeInternal _ForwardOutRequest_default_instance_;
class ForwardOutTarget;
struct ForwardOutTargetDefaultTypeInternal;
extern ForwardOutTargetDefaultTypeInternal _ForwardOutTarget_default_instance_;
class GSHeartbeatRequest;
struct GSHeartbeatRequestDefaultTypeInternal;
extern GSHeartbeatRequestDefaultTypeInternal _GSHeartbeatRequest_default_instance_;
class KickRequest;
struct KickRequestDefaultTypeInternal;
extern KickRequestDefaultTypeInternal _KickRequest_default_instance_;
class SetGameObjectPosRequest;
struct SetGameObjectPosRequestDefaultTypeInternal;
extern SetGameObjectPosRequestDefaultTypeInternal _SetGameObjectPosRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::ForwardOutRequest* Arena::CreateMaybeMessage<::wukong::pb::ForwardOutRequest>(Arena*);
template<> ::wukong::pb::ForwardOutTarget* Arena::CreateMaybeMessage<::wukong::pb::ForwardOutTarget>(Arena*);
template<> ::wukong::pb::GSHeartbeatRequest* Arena::CreateMaybeMessage<::wukong::pb::GSHeartbeatRequest>(Arena*);
template<> ::wukong::pb::KickRequest* Arena::CreateMaybeMessage<::wukong::pb::KickRequest>(Arena*);
template<> ::wukong::pb::SetGameObjectPosRequest* Arena::CreateMaybeMessage<::wukong::pb::SetGameObjectPosRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class KickRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.KickRequest) */ {
 public:
  inline KickRequest() : KickRequest(nullptr) {}
  ~KickRequest() override;
  explicit constexpr KickRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KickRequest(const KickRequest& from);
  KickRequest(KickRequest&& from) noexcept
    : KickRequest() {
    *this = ::std::move(from);
  }

  inline KickRequest& operator=(const KickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickRequest& operator=(KickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KickRequest* internal_default_instance() {
    return reinterpret_cast<const KickRequest*>(
               &_KickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KickRequest& a, KickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KickRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickRequest* New() const final {
    return new KickRequest();
  }

  KickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KickRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KickRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.KickRequest";
  }
  protected:
  explicit KickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGTokenFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string gToken = 3;
  void clear_gtoken();
  const std::string& gtoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gtoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gtoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_gtoken();
  void set_allocated_gtoken(std::string* gtoken);
  private:
  const std::string& _internal_gtoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtoken(const std::string& value);
  std::string* _internal_mutable_gtoken();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.KickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ForwardOutTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.ForwardOutTarget) */ {
 public:
  inline ForwardOutTarget() : ForwardOutTarget(nullptr) {}
  ~ForwardOutTarget() override;
  explicit constexpr ForwardOutTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardOutTarget(const ForwardOutTarget& from);
  ForwardOutTarget(ForwardOutTarget&& from) noexcept
    : ForwardOutTarget() {
    *this = ::std::move(from);
  }

  inline ForwardOutTarget& operator=(const ForwardOutTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardOutTarget& operator=(ForwardOutTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardOutTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardOutTarget* internal_default_instance() {
    return reinterpret_cast<const ForwardOutTarget*>(
               &_ForwardOutTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ForwardOutTarget& a, ForwardOutTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardOutTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardOutTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardOutTarget* New() const final {
    return new ForwardOutTarget();
  }

  ForwardOutTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardOutTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardOutTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ForwardOutTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardOutTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.ForwardOutTarget";
  }
  protected:
  explicit ForwardOutTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLTokenFieldNumber = 2,
  };
  // uint32 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lToken = 2;
  void clear_ltoken();
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken() const;
  void set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ltoken() const;
  void _internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.ForwardOutTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ForwardOutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.ForwardOutRequest) */ {
 public:
  inline ForwardOutRequest() : ForwardOutRequest(nullptr) {}
  ~ForwardOutRequest() override;
  explicit constexpr ForwardOutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardOutRequest(const ForwardOutRequest& from);
  ForwardOutRequest(ForwardOutRequest&& from) noexcept
    : ForwardOutRequest() {
    *this = ::std::move(from);
  }

  inline ForwardOutRequest& operator=(const ForwardOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardOutRequest& operator=(ForwardOutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardOutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardOutRequest* internal_default_instance() {
    return reinterpret_cast<const ForwardOutRequest*>(
               &_ForwardOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ForwardOutRequest& a, ForwardOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardOutRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardOutRequest* New() const final {
    return new ForwardOutRequest();
  }

  ForwardOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardOutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardOutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ForwardOutRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardOutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.ForwardOutRequest";
  }
  protected:
  explicit ForwardOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 4,
    kRawMsgFieldNumber = 5,
    kServerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // repeated .wukong.pb.ForwardOutTarget targets = 4;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::wukong::pb::ForwardOutTarget* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::ForwardOutTarget >*
      mutable_targets();
  private:
  const ::wukong::pb::ForwardOutTarget& _internal_targets(int index) const;
  ::wukong::pb::ForwardOutTarget* _internal_add_targets();
  public:
  const ::wukong::pb::ForwardOutTarget& targets(int index) const;
  ::wukong::pb::ForwardOutTarget* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::ForwardOutTarget >&
      targets() const;

  // bytes rawMsg = 5;
  void clear_rawmsg();
  const std::string& rawmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rawmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rawmsg();
  PROTOBUF_MUST_USE_RESULT std::string* release_rawmsg();
  void set_allocated_rawmsg(std::string* rawmsg);
  private:
  const std::string& _internal_rawmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawmsg(const std::string& value);
  std::string* _internal_mutable_rawmsg();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 tag = 3;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.ForwardOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::ForwardOutTarget > targets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetGameObjectPosRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.SetGameObjectPosRequest) */ {
 public:
  inline SetGameObjectPosRequest() : SetGameObjectPosRequest(nullptr) {}
  ~SetGameObjectPosRequest() override;
  explicit constexpr SetGameObjectPosRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGameObjectPosRequest(const SetGameObjectPosRequest& from);
  SetGameObjectPosRequest(SetGameObjectPosRequest&& from) noexcept
    : SetGameObjectPosRequest() {
    *this = ::std::move(from);
  }

  inline SetGameObjectPosRequest& operator=(const SetGameObjectPosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGameObjectPosRequest& operator=(SetGameObjectPosRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGameObjectPosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGameObjectPosRequest* internal_default_instance() {
    return reinterpret_cast<const SetGameObjectPosRequest*>(
               &_SetGameObjectPosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetGameObjectPosRequest& a, SetGameObjectPosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGameObjectPosRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGameObjectPosRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGameObjectPosRequest* New() const final {
    return new SetGameObjectPosRequest();
  }

  SetGameObjectPosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGameObjectPosRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGameObjectPosRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetGameObjectPosRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGameObjectPosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.SetGameObjectPosRequest";
  }
  protected:
  explicit SetGameObjectPosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLTokenFieldNumber = 3,
    kGsTypeFieldNumber = 4,
    kGsIdFieldNumber = 5,
  };
  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lToken = 3;
  void clear_ltoken();
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken() const;
  void set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ltoken() const;
  void _internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gsType = 4;
  void clear_gstype();
  ::PROTOBUF_NAMESPACE_ID::uint32 gstype() const;
  void set_gstype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gstype() const;
  void _internal_set_gstype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gsId = 5;
  void clear_gsid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gsid() const;
  void set_gsid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gsid() const;
  void _internal_set_gsid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.SetGameObjectPosRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gstype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GSHeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.GSHeartbeatRequest) */ {
 public:
  inline GSHeartbeatRequest() : GSHeartbeatRequest(nullptr) {}
  ~GSHeartbeatRequest() override;
  explicit constexpr GSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GSHeartbeatRequest(const GSHeartbeatRequest& from);
  GSHeartbeatRequest(GSHeartbeatRequest&& from) noexcept
    : GSHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline GSHeartbeatRequest& operator=(const GSHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GSHeartbeatRequest& operator=(GSHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GSHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GSHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const GSHeartbeatRequest*>(
               &_GSHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GSHeartbeatRequest& a, GSHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GSHeartbeatRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GSHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GSHeartbeatRequest* New() const final {
    return new GSHeartbeatRequest();
  }

  GSHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GSHeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GSHeartbeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GSHeartbeatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GSHeartbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.GSHeartbeatRequest";
  }
  protected:
  explicit GSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLTokenFieldNumber = 3,
  };
  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lToken = 3;
  void clear_ltoken();
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken() const;
  void set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ltoken() const;
  void _internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.GSHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ltoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_5fservice_2eproto;
};
// ===================================================================

class GatewayService_Stub;

class GatewayService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GatewayService() {};
 public:
  virtual ~GatewayService();

  typedef GatewayService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::KickRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::OnlineCounts* response,
                       ::google::protobuf::Closure* done);
  virtual void forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardOutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SetGameObjectPosRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::GSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GatewayService);
};

class GatewayService_Stub : public GatewayService {
 public:
  GatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GatewayService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GatewayService ------------------------------------------

  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::KickRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::OnlineCounts* response,
                       ::google::protobuf::Closure* done);
  void forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardOutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SetGameObjectPosRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::GSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GatewayService_Stub);
};


// -------------------------------------------------------------------

class InnerGatewayService_Stub;

class InnerGatewayService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InnerGatewayService() {};
 public:
  virtual ~InnerGatewayService();

  typedef InnerGatewayService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::KickRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::Uint32Value* response,
                       ::google::protobuf::Closure* done);
  virtual void forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardOutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SetGameObjectPosRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::GSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerGatewayService);
};

class InnerGatewayService_Stub : public InnerGatewayService {
 public:
  InnerGatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  InnerGatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~InnerGatewayService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements InnerGatewayService ------------------------------------------

  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::KickRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::Uint32Value* response,
                       ::google::protobuf::Closure* done);
  void forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardOutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SetGameObjectPosRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::GSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerGatewayService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KickRequest

// uint32 serverId = 1;
inline void KickRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.KickRequest.serverId)
  return _internal_serverid();
}
inline void KickRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void KickRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.KickRequest.serverId)
}

// uint32 userId = 2;
inline void KickRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickRequest::userid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.KickRequest.userId)
  return _internal_userid();
}
inline void KickRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void KickRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.KickRequest.userId)
}

// string gToken = 3;
inline void KickRequest::clear_gtoken() {
  gtoken_.ClearToEmpty();
}
inline const std::string& KickRequest::gtoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.KickRequest.gToken)
  return _internal_gtoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KickRequest::set_gtoken(ArgT0&& arg0, ArgT... args) {
 
 gtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.KickRequest.gToken)
}
inline std::string* KickRequest::mutable_gtoken() {
  std::string* _s = _internal_mutable_gtoken();
  // @@protoc_insertion_point(field_mutable:wukong.pb.KickRequest.gToken)
  return _s;
}
inline const std::string& KickRequest::_internal_gtoken() const {
  return gtoken_.Get();
}
inline void KickRequest::_internal_set_gtoken(const std::string& value) {
  
  gtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KickRequest::_internal_mutable_gtoken() {
  
  return gtoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KickRequest::release_gtoken() {
  // @@protoc_insertion_point(field_release:wukong.pb.KickRequest.gToken)
  return gtoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KickRequest::set_allocated_gtoken(std::string* gtoken) {
  if (gtoken != nullptr) {
    
  } else {
    
  }
  gtoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gtoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.KickRequest.gToken)
}

// -------------------------------------------------------------------

// ForwardOutTarget

// uint32 userId = 1;
inline void ForwardOutTarget::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutTarget::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutTarget::userid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutTarget.userId)
  return _internal_userid();
}
inline void ForwardOutTarget::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void ForwardOutTarget::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutTarget.userId)
}

// uint32 lToken = 2;
inline void ForwardOutTarget::clear_ltoken() {
  ltoken_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutTarget::_internal_ltoken() const {
  return ltoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutTarget::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutTarget.lToken)
  return _internal_ltoken();
}
inline void ForwardOutTarget::_internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ltoken_ = value;
}
inline void ForwardOutTarget::set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ltoken(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutTarget.lToken)
}

// -------------------------------------------------------------------

// ForwardOutRequest

// uint32 serverId = 1;
inline void ForwardOutRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutRequest.serverId)
  return _internal_serverid();
}
inline void ForwardOutRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void ForwardOutRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutRequest.serverId)
}

// int32 type = 2;
inline void ForwardOutRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForwardOutRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForwardOutRequest::type() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutRequest.type)
  return _internal_type();
}
inline void ForwardOutRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ForwardOutRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutRequest.type)
}

// uint32 tag = 3;
inline void ForwardOutRequest::clear_tag() {
  tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutRequest::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardOutRequest::tag() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutRequest.tag)
  return _internal_tag();
}
inline void ForwardOutRequest::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_ = value;
}
inline void ForwardOutRequest::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutRequest.tag)
}

// repeated .wukong.pb.ForwardOutTarget targets = 4;
inline int ForwardOutRequest::_internal_targets_size() const {
  return targets_.size();
}
inline int ForwardOutRequest::targets_size() const {
  return _internal_targets_size();
}
inline void ForwardOutRequest::clear_targets() {
  targets_.Clear();
}
inline ::wukong::pb::ForwardOutTarget* ForwardOutRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.ForwardOutRequest.targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::ForwardOutTarget >*
ForwardOutRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.ForwardOutRequest.targets)
  return &targets_;
}
inline const ::wukong::pb::ForwardOutTarget& ForwardOutRequest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const ::wukong::pb::ForwardOutTarget& ForwardOutRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutRequest.targets)
  return _internal_targets(index);
}
inline ::wukong::pb::ForwardOutTarget* ForwardOutRequest::_internal_add_targets() {
  return targets_.Add();
}
inline ::wukong::pb::ForwardOutTarget* ForwardOutRequest::add_targets() {
  ::wukong::pb::ForwardOutTarget* _add = _internal_add_targets();
  // @@protoc_insertion_point(field_add:wukong.pb.ForwardOutRequest.targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::ForwardOutTarget >&
ForwardOutRequest::targets() const {
  // @@protoc_insertion_point(field_list:wukong.pb.ForwardOutRequest.targets)
  return targets_;
}

// bytes rawMsg = 5;
inline void ForwardOutRequest::clear_rawmsg() {
  rawmsg_.ClearToEmpty();
}
inline const std::string& ForwardOutRequest::rawmsg() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardOutRequest.rawMsg)
  return _internal_rawmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardOutRequest::set_rawmsg(ArgT0&& arg0, ArgT... args) {
 
 rawmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardOutRequest.rawMsg)
}
inline std::string* ForwardOutRequest::mutable_rawmsg() {
  std::string* _s = _internal_mutable_rawmsg();
  // @@protoc_insertion_point(field_mutable:wukong.pb.ForwardOutRequest.rawMsg)
  return _s;
}
inline const std::string& ForwardOutRequest::_internal_rawmsg() const {
  return rawmsg_.Get();
}
inline void ForwardOutRequest::_internal_set_rawmsg(const std::string& value) {
  
  rawmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ForwardOutRequest::_internal_mutable_rawmsg() {
  
  return rawmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ForwardOutRequest::release_rawmsg() {
  // @@protoc_insertion_point(field_release:wukong.pb.ForwardOutRequest.rawMsg)
  return rawmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ForwardOutRequest::set_allocated_rawmsg(std::string* rawmsg) {
  if (rawmsg != nullptr) {
    
  } else {
    
  }
  rawmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawmsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.ForwardOutRequest.rawMsg)
}

// -------------------------------------------------------------------

// SetGameObjectPosRequest

// uint32 serverId = 1;
inline void SetGameObjectPosRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SetGameObjectPosRequest.serverId)
  return _internal_serverid();
}
inline void SetGameObjectPosRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void SetGameObjectPosRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SetGameObjectPosRequest.serverId)
}

// uint32 userId = 2;
inline void SetGameObjectPosRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::userid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SetGameObjectPosRequest.userId)
  return _internal_userid();
}
inline void SetGameObjectPosRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void SetGameObjectPosRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SetGameObjectPosRequest.userId)
}

// uint32 lToken = 3;
inline void SetGameObjectPosRequest::clear_ltoken() {
  ltoken_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::_internal_ltoken() const {
  return ltoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SetGameObjectPosRequest.lToken)
  return _internal_ltoken();
}
inline void SetGameObjectPosRequest::_internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ltoken_ = value;
}
inline void SetGameObjectPosRequest::set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ltoken(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SetGameObjectPosRequest.lToken)
}

// uint32 gsType = 4;
inline void SetGameObjectPosRequest::clear_gstype() {
  gstype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::_internal_gstype() const {
  return gstype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::gstype() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SetGameObjectPosRequest.gsType)
  return _internal_gstype();
}
inline void SetGameObjectPosRequest::_internal_set_gstype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gstype_ = value;
}
inline void SetGameObjectPosRequest::set_gstype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gstype(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SetGameObjectPosRequest.gsType)
}

// uint32 gsId = 5;
inline void SetGameObjectPosRequest::clear_gsid() {
  gsid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::_internal_gsid() const {
  return gsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetGameObjectPosRequest::gsid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SetGameObjectPosRequest.gsId)
  return _internal_gsid();
}
inline void SetGameObjectPosRequest::_internal_set_gsid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gsid_ = value;
}
inline void SetGameObjectPosRequest::set_gsid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gsid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SetGameObjectPosRequest.gsId)
}

// -------------------------------------------------------------------

// GSHeartbeatRequest

// uint32 serverId = 1;
inline void GSHeartbeatRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.GSHeartbeatRequest.serverId)
  return _internal_serverid();
}
inline void GSHeartbeatRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void GSHeartbeatRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.GSHeartbeatRequest.serverId)
}

// uint32 userId = 2;
inline void GSHeartbeatRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::userid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.GSHeartbeatRequest.userId)
  return _internal_userid();
}
inline void GSHeartbeatRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void GSHeartbeatRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.GSHeartbeatRequest.userId)
}

// uint32 lToken = 3;
inline void GSHeartbeatRequest::clear_ltoken() {
  ltoken_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::_internal_ltoken() const {
  return ltoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GSHeartbeatRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.GSHeartbeatRequest.lToken)
  return _internal_ltoken();
}
inline void GSHeartbeatRequest::_internal_set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ltoken_ = value;
}
inline void GSHeartbeatRequest::set_ltoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ltoken(value);
  // @@protoc_insertion_point(field_set:wukong.pb.GSHeartbeatRequest.lToken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gateway_5fservice_2eproto
