// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2eproto;
namespace demo {
namespace pb {
class Card;
struct CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Cards;
struct CardsDefaultTypeInternal;
extern CardsDefaultTypeInternal _Cards_default_instance_;
class Currency;
struct CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
class Pet;
struct PetDefaultTypeInternal;
extern PetDefaultTypeInternal _Pet_default_instance_;
class Pets;
struct PetsDefaultTypeInternal;
extern PetsDefaultTypeInternal _Pets_default_instance_;
class SignInActivity;
struct SignInActivityDefaultTypeInternal;
extern SignInActivityDefaultTypeInternal _SignInActivity_default_instance_;
}  // namespace pb
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::pb::Card* Arena::CreateMaybeMessage<::demo::pb::Card>(Arena*);
template<> ::demo::pb::Cards* Arena::CreateMaybeMessage<::demo::pb::Cards>(Arena*);
template<> ::demo::pb::Currency* Arena::CreateMaybeMessage<::demo::pb::Currency>(Arena*);
template<> ::demo::pb::Pet* Arena::CreateMaybeMessage<::demo::pb::Pet>(Arena*);
template<> ::demo::pb::Pets* Arena::CreateMaybeMessage<::demo::pb::Pets>(Arena*);
template<> ::demo::pb::SignInActivity* Arena::CreateMaybeMessage<::demo::pb::SignInActivity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {
namespace pb {

// ===================================================================

class Currency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.Currency) */ {
 public:
  inline Currency() : Currency(nullptr) {}
  ~Currency() override;
  explicit constexpr Currency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Currency(const Currency& from);
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Currency& operator=(Currency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Currency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }
  inline void Swap(Currency* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Currency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const final {
    return new Currency();
  }

  Currency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Currency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Currency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Currency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Currency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.Currency";
  }
  protected:
  explicit Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kC1FieldNumber = 1,
    kC2FieldNumber = 2,
    kC3FieldNumber = 3,
    kC4FieldNumber = 4,
    kC5FieldNumber = 5,
  };
  // uint32 c1 = 1;
  void clear_c1();
  ::PROTOBUF_NAMESPACE_ID::uint32 c1() const;
  void set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c1() const;
  void _internal_set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c2 = 2;
  void clear_c2();
  ::PROTOBUF_NAMESPACE_ID::uint32 c2() const;
  void set_c2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c2() const;
  void _internal_set_c2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c3 = 3;
  void clear_c3();
  ::PROTOBUF_NAMESPACE_ID::uint32 c3() const;
  void set_c3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c3() const;
  void _internal_set_c3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c4 = 4;
  void clear_c4();
  ::PROTOBUF_NAMESPACE_ID::uint32 c4() const;
  void set_c4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c4() const;
  void _internal_set_c4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c5 = 5;
  void clear_c5();
  ::PROTOBUF_NAMESPACE_ID::uint32 c5() const;
  void set_c5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c5() const;
  void _internal_set_c5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.pb.Currency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Card final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.Card) */ {
 public:
  inline Card() : Card(nullptr) {}
  ~Card() override;
  explicit constexpr Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Card(const Card& from);
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline Card& operator=(Card&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }
  inline void Swap(Card* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return new Card();
  }

  Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Card& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Card& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.Card";
  }
  protected:
  explicit Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
    kStarFieldNumber = 2,
    kLvFieldNumber = 3,
  };
  // uint32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 star = 2;
  void clear_star();
  ::PROTOBUF_NAMESPACE_ID::uint32 star() const;
  void set_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_star() const;
  void _internal_set_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lv = 3;
  void clear_lv();
  ::PROTOBUF_NAMESPACE_ID::uint32 lv() const;
  void set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lv() const;
  void _internal_set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.pb.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cardid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 star_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Cards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.Cards) */ {
 public:
  inline Cards() : Cards(nullptr) {}
  ~Cards() override;
  explicit constexpr Cards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cards(const Cards& from);
  Cards(Cards&& from) noexcept
    : Cards() {
    *this = ::std::move(from);
  }

  inline Cards& operator=(const Cards& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cards& operator=(Cards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cards& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cards* internal_default_instance() {
    return reinterpret_cast<const Cards*>(
               &_Cards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cards& a, Cards& b) {
    a.Swap(&b);
  }
  inline void Swap(Cards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cards* New() const final {
    return new Cards();
  }

  Cards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cards>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cards& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cards& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.Cards";
  }
  protected:
  explicit Cards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .demo.pb.Card cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::demo::pb::Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Card >*
      mutable_cards();
  private:
  const ::demo::pb::Card& _internal_cards(int index) const;
  ::demo::pb::Card* _internal_add_cards();
  public:
  const ::demo::pb::Card& cards(int index) const;
  ::demo::pb::Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:demo.pb.Cards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Card > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Pet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.Pet) */ {
 public:
  inline Pet() : Pet(nullptr) {}
  ~Pet() override;
  explicit constexpr Pet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pet(const Pet& from);
  Pet(Pet&& from) noexcept
    : Pet() {
    *this = ::std::move(from);
  }

  inline Pet& operator=(const Pet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pet& operator=(Pet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pet* internal_default_instance() {
    return reinterpret_cast<const Pet*>(
               &_Pet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pet& a, Pet& b) {
    a.Swap(&b);
  }
  inline void Swap(Pet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pet* New() const final {
    return new Pet();
  }

  Pet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.Pet";
  }
  protected:
  explicit Pet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetIdFieldNumber = 1,
    kDefIdFieldNumber = 2,
    kExpFieldNumber = 3,
    kLvFieldNumber = 4,
  };
  // uint32 petId = 1;
  void clear_petid();
  ::PROTOBUF_NAMESPACE_ID::uint32 petid() const;
  void set_petid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_petid() const;
  void _internal_set_petid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 defId = 2;
  void clear_defid();
  ::PROTOBUF_NAMESPACE_ID::uint32 defid() const;
  void set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defid() const;
  void _internal_set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp = 3;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lv = 4;
  void clear_lv();
  ::PROTOBUF_NAMESPACE_ID::uint32 lv() const;
  void set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lv() const;
  void _internal_set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.pb.Pet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 petid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Pets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.Pets) */ {
 public:
  inline Pets() : Pets(nullptr) {}
  ~Pets() override;
  explicit constexpr Pets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pets(const Pets& from);
  Pets(Pets&& from) noexcept
    : Pets() {
    *this = ::std::move(from);
  }

  inline Pets& operator=(const Pets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pets& operator=(Pets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pets& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pets* internal_default_instance() {
    return reinterpret_cast<const Pets*>(
               &_Pets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pets& a, Pets& b) {
    a.Swap(&b);
  }
  inline void Swap(Pets* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pets* New() const final {
    return new Pets();
  }

  Pets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.Pets";
  }
  protected:
  explicit Pets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetsFieldNumber = 1,
  };
  // repeated .demo.pb.Pet pets = 1;
  int pets_size() const;
  private:
  int _internal_pets_size() const;
  public:
  void clear_pets();
  ::demo::pb::Pet* mutable_pets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Pet >*
      mutable_pets();
  private:
  const ::demo::pb::Pet& _internal_pets(int index) const;
  ::demo::pb::Pet* _internal_add_pets();
  public:
  const ::demo::pb::Pet& pets(int index) const;
  ::demo::pb::Pet* add_pets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Pet >&
      pets() const;

  // @@protoc_insertion_point(class_scope:demo.pb.Pets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Pet > pets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class SignInActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.pb.SignInActivity) */ {
 public:
  inline SignInActivity() : SignInActivity(nullptr) {}
  ~SignInActivity() override;
  explicit constexpr SignInActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignInActivity(const SignInActivity& from);
  SignInActivity(SignInActivity&& from) noexcept
    : SignInActivity() {
    *this = ::std::move(from);
  }

  inline SignInActivity& operator=(const SignInActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInActivity& operator=(SignInActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignInActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInActivity* internal_default_instance() {
    return reinterpret_cast<const SignInActivity*>(
               &_SignInActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SignInActivity& a, SignInActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInActivity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignInActivity* New() const final {
    return new SignInActivity();
  }

  SignInActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignInActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignInActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignInActivity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.pb.SignInActivity";
  }
  protected:
  explicit SignInActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFieldNumber = 1,
  };
  // repeated uint32 days = 1;
  int days_size() const;
  private:
  int _internal_days_size() const;
  public:
  void clear_days();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_days(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_days() const;
  void _internal_add_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_days();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 days(int index) const;
  void set_days(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      days() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_days();

  // @@protoc_insertion_point(class_scope:demo.pb.SignInActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > days_;
  mutable std::atomic<int> _days_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Currency

// uint32 c1 = 1;
inline void Currency::clear_c1() {
  c1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::_internal_c1() const {
  return c1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::c1() const {
  // @@protoc_insertion_point(field_get:demo.pb.Currency.c1)
  return _internal_c1();
}
inline void Currency::_internal_set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c1_ = value;
}
inline void Currency::set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c1(value);
  // @@protoc_insertion_point(field_set:demo.pb.Currency.c1)
}

// uint32 c2 = 2;
inline void Currency::clear_c2() {
  c2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::_internal_c2() const {
  return c2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::c2() const {
  // @@protoc_insertion_point(field_get:demo.pb.Currency.c2)
  return _internal_c2();
}
inline void Currency::_internal_set_c2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c2_ = value;
}
inline void Currency::set_c2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c2(value);
  // @@protoc_insertion_point(field_set:demo.pb.Currency.c2)
}

// uint32 c3 = 3;
inline void Currency::clear_c3() {
  c3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::_internal_c3() const {
  return c3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::c3() const {
  // @@protoc_insertion_point(field_get:demo.pb.Currency.c3)
  return _internal_c3();
}
inline void Currency::_internal_set_c3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c3_ = value;
}
inline void Currency::set_c3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c3(value);
  // @@protoc_insertion_point(field_set:demo.pb.Currency.c3)
}

// uint32 c4 = 4;
inline void Currency::clear_c4() {
  c4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::_internal_c4() const {
  return c4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::c4() const {
  // @@protoc_insertion_point(field_get:demo.pb.Currency.c4)
  return _internal_c4();
}
inline void Currency::_internal_set_c4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c4_ = value;
}
inline void Currency::set_c4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c4(value);
  // @@protoc_insertion_point(field_set:demo.pb.Currency.c4)
}

// uint32 c5 = 5;
inline void Currency::clear_c5() {
  c5_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::_internal_c5() const {
  return c5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Currency::c5() const {
  // @@protoc_insertion_point(field_get:demo.pb.Currency.c5)
  return _internal_c5();
}
inline void Currency::_internal_set_c5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c5_ = value;
}
inline void Currency::set_c5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c5(value);
  // @@protoc_insertion_point(field_set:demo.pb.Currency.c5)
}

// -------------------------------------------------------------------

// Card

// uint32 cardId = 1;
inline void Card::clear_cardid() {
  cardid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::cardid() const {
  // @@protoc_insertion_point(field_get:demo.pb.Card.cardId)
  return _internal_cardid();
}
inline void Card::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cardid_ = value;
}
inline void Card::set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:demo.pb.Card.cardId)
}

// uint32 star = 2;
inline void Card::clear_star() {
  star_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::_internal_star() const {
  return star_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::star() const {
  // @@protoc_insertion_point(field_get:demo.pb.Card.star)
  return _internal_star();
}
inline void Card::_internal_set_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  star_ = value;
}
inline void Card::set_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:demo.pb.Card.star)
}

// uint32 lv = 3;
inline void Card::clear_lv() {
  lv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::_internal_lv() const {
  return lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::lv() const {
  // @@protoc_insertion_point(field_get:demo.pb.Card.lv)
  return _internal_lv();
}
inline void Card::_internal_set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lv_ = value;
}
inline void Card::set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lv(value);
  // @@protoc_insertion_point(field_set:demo.pb.Card.lv)
}

// -------------------------------------------------------------------

// Cards

// repeated .demo.pb.Card cards = 1;
inline int Cards::_internal_cards_size() const {
  return cards_.size();
}
inline int Cards::cards_size() const {
  return _internal_cards_size();
}
inline void Cards::clear_cards() {
  cards_.Clear();
}
inline ::demo::pb::Card* Cards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:demo.pb.Cards.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Card >*
Cards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:demo.pb.Cards.cards)
  return &cards_;
}
inline const ::demo::pb::Card& Cards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::demo::pb::Card& Cards::cards(int index) const {
  // @@protoc_insertion_point(field_get:demo.pb.Cards.cards)
  return _internal_cards(index);
}
inline ::demo::pb::Card* Cards::_internal_add_cards() {
  return cards_.Add();
}
inline ::demo::pb::Card* Cards::add_cards() {
  ::demo::pb::Card* _add = _internal_add_cards();
  // @@protoc_insertion_point(field_add:demo.pb.Cards.cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Card >&
Cards::cards() const {
  // @@protoc_insertion_point(field_list:demo.pb.Cards.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Pet

// uint32 petId = 1;
inline void Pet::clear_petid() {
  petid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::_internal_petid() const {
  return petid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::petid() const {
  // @@protoc_insertion_point(field_get:demo.pb.Pet.petId)
  return _internal_petid();
}
inline void Pet::_internal_set_petid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  petid_ = value;
}
inline void Pet::set_petid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_petid(value);
  // @@protoc_insertion_point(field_set:demo.pb.Pet.petId)
}

// uint32 defId = 2;
inline void Pet::clear_defid() {
  defid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::_internal_defid() const {
  return defid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::defid() const {
  // @@protoc_insertion_point(field_get:demo.pb.Pet.defId)
  return _internal_defid();
}
inline void Pet::_internal_set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  defid_ = value;
}
inline void Pet::set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defid(value);
  // @@protoc_insertion_point(field_set:demo.pb.Pet.defId)
}

// uint32 exp = 3;
inline void Pet::clear_exp() {
  exp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::exp() const {
  // @@protoc_insertion_point(field_get:demo.pb.Pet.exp)
  return _internal_exp();
}
inline void Pet::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_ = value;
}
inline void Pet::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:demo.pb.Pet.exp)
}

// uint32 lv = 4;
inline void Pet::clear_lv() {
  lv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::_internal_lv() const {
  return lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pet::lv() const {
  // @@protoc_insertion_point(field_get:demo.pb.Pet.lv)
  return _internal_lv();
}
inline void Pet::_internal_set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lv_ = value;
}
inline void Pet::set_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lv(value);
  // @@protoc_insertion_point(field_set:demo.pb.Pet.lv)
}

// -------------------------------------------------------------------

// Pets

// repeated .demo.pb.Pet pets = 1;
inline int Pets::_internal_pets_size() const {
  return pets_.size();
}
inline int Pets::pets_size() const {
  return _internal_pets_size();
}
inline void Pets::clear_pets() {
  pets_.Clear();
}
inline ::demo::pb::Pet* Pets::mutable_pets(int index) {
  // @@protoc_insertion_point(field_mutable:demo.pb.Pets.pets)
  return pets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Pet >*
Pets::mutable_pets() {
  // @@protoc_insertion_point(field_mutable_list:demo.pb.Pets.pets)
  return &pets_;
}
inline const ::demo::pb::Pet& Pets::_internal_pets(int index) const {
  return pets_.Get(index);
}
inline const ::demo::pb::Pet& Pets::pets(int index) const {
  // @@protoc_insertion_point(field_get:demo.pb.Pets.pets)
  return _internal_pets(index);
}
inline ::demo::pb::Pet* Pets::_internal_add_pets() {
  return pets_.Add();
}
inline ::demo::pb::Pet* Pets::add_pets() {
  ::demo::pb::Pet* _add = _internal_add_pets();
  // @@protoc_insertion_point(field_add:demo.pb.Pets.pets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::pb::Pet >&
Pets::pets() const {
  // @@protoc_insertion_point(field_list:demo.pb.Pets.pets)
  return pets_;
}

// -------------------------------------------------------------------

// SignInActivity

// repeated uint32 days = 1;
inline int SignInActivity::_internal_days_size() const {
  return days_.size();
}
inline int SignInActivity::days_size() const {
  return _internal_days_size();
}
inline void SignInActivity::clear_days() {
  days_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignInActivity::_internal_days(int index) const {
  return days_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignInActivity::days(int index) const {
  // @@protoc_insertion_point(field_get:demo.pb.SignInActivity.days)
  return _internal_days(index);
}
inline void SignInActivity::set_days(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  days_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.pb.SignInActivity.days)
}
inline void SignInActivity::_internal_add_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  days_.Add(value);
}
inline void SignInActivity::add_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_days(value);
  // @@protoc_insertion_point(field_add:demo.pb.SignInActivity.days)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SignInActivity::_internal_days() const {
  return days_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SignInActivity::days() const {
  // @@protoc_insertion_point(field_list:demo.pb.SignInActivity.days)
  return _internal_days();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SignInActivity::_internal_mutable_days() {
  return &days_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SignInActivity::mutable_days() {
  // @@protoc_insertion_point(field_mutable_list:demo.pb.SignInActivity.days)
  return _internal_mutable_days();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace demo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
