// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
#include "common.pb.h"
#include "inner_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_record_5fservice_2eproto;
namespace wukong {
namespace pb {
class LoadRoleDataRequest;
struct LoadRoleDataRequestDefaultTypeInternal;
extern LoadRoleDataRequestDefaultTypeInternal _LoadRoleDataRequest_default_instance_;
class LoadRoleDataResponse;
struct LoadRoleDataResponseDefaultTypeInternal;
extern LoadRoleDataResponseDefaultTypeInternal _LoadRoleDataResponse_default_instance_;
class RSHeartbeatRequest;
struct RSHeartbeatRequestDefaultTypeInternal;
extern RSHeartbeatRequestDefaultTypeInternal _RSHeartbeatRequest_default_instance_;
class SyncData;
struct SyncDataDefaultTypeInternal;
extern SyncDataDefaultTypeInternal _SyncData_default_instance_;
class SyncRequest;
struct SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::LoadRoleDataRequest* Arena::CreateMaybeMessage<::wukong::pb::LoadRoleDataRequest>(Arena*);
template<> ::wukong::pb::LoadRoleDataResponse* Arena::CreateMaybeMessage<::wukong::pb::LoadRoleDataResponse>(Arena*);
template<> ::wukong::pb::RSHeartbeatRequest* Arena::CreateMaybeMessage<::wukong::pb::RSHeartbeatRequest>(Arena*);
template<> ::wukong::pb::SyncData* Arena::CreateMaybeMessage<::wukong::pb::SyncData>(Arena*);
template<> ::wukong::pb::SyncRequest* Arena::CreateMaybeMessage<::wukong::pb::SyncRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class LoadRoleDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.LoadRoleDataRequest) */ {
 public:
  inline LoadRoleDataRequest() : LoadRoleDataRequest(nullptr) {}
  ~LoadRoleDataRequest() override;
  explicit constexpr LoadRoleDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadRoleDataRequest(const LoadRoleDataRequest& from);
  LoadRoleDataRequest(LoadRoleDataRequest&& from) noexcept
    : LoadRoleDataRequest() {
    *this = ::std::move(from);
  }

  inline LoadRoleDataRequest& operator=(const LoadRoleDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleDataRequest& operator=(LoadRoleDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadRoleDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadRoleDataRequest* internal_default_instance() {
    return reinterpret_cast<const LoadRoleDataRequest*>(
               &_LoadRoleDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadRoleDataRequest& a, LoadRoleDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRoleDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleDataRequest* New() const final {
    return new LoadRoleDataRequest();
  }

  LoadRoleDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadRoleDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadRoleDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.LoadRoleDataRequest";
  }
  protected:
  explicit LoadRoleDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLTokenFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kRoleIdFieldNumber = 3,
  };
  // string lToken = 2;
  void clear_ltoken();
  const std::string& ltoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ltoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ltoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_ltoken();
  void set_allocated_ltoken(std::string* ltoken);
  private:
  const std::string& _internal_ltoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ltoken(const std::string& value);
  std::string* _internal_mutable_ltoken();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roleId = 3;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.LoadRoleDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadRoleDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.LoadRoleDataResponse) */ {
 public:
  inline LoadRoleDataResponse() : LoadRoleDataResponse(nullptr) {}
  ~LoadRoleDataResponse() override;
  explicit constexpr LoadRoleDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadRoleDataResponse(const LoadRoleDataResponse& from);
  LoadRoleDataResponse(LoadRoleDataResponse&& from) noexcept
    : LoadRoleDataResponse() {
    *this = ::std::move(from);
  }

  inline LoadRoleDataResponse& operator=(const LoadRoleDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleDataResponse& operator=(LoadRoleDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadRoleDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadRoleDataResponse* internal_default_instance() {
    return reinterpret_cast<const LoadRoleDataResponse*>(
               &_LoadRoleDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadRoleDataResponse& a, LoadRoleDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRoleDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleDataResponse* New() const final {
    return new LoadRoleDataResponse();
  }

  LoadRoleDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadRoleDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadRoleDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.LoadRoleDataResponse";
  }
  protected:
  explicit LoadRoleDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kErrCodeFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serverId = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.LoadRoleDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SyncData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.SyncData) */ {
 public:
  inline SyncData() : SyncData(nullptr) {}
  ~SyncData() override;
  explicit constexpr SyncData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncData(const SyncData& from);
  SyncData(SyncData&& from) noexcept
    : SyncData() {
    *this = ::std::move(from);
  }

  inline SyncData& operator=(const SyncData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncData& operator=(SyncData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncData* internal_default_instance() {
    return reinterpret_cast<const SyncData*>(
               &_SyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncData& a, SyncData& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncData* New() const final {
    return new SyncData();
  }

  SyncData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.SyncData";
  }
  protected:
  explicit SyncData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.SyncData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SyncRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {}
  ~SyncRequest() override;
  explicit constexpr SyncRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return new SyncRequest();
  }

  SyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.SyncRequest";
  }
  protected:
  explicit SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 4,
    kRemovesFieldNumber = 5,
    kLTokenFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kRoleIdFieldNumber = 3,
  };
  // repeated .wukong.pb.SyncData datas = 4;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::wukong::pb::SyncData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::SyncData >*
      mutable_datas();
  private:
  const ::wukong::pb::SyncData& _internal_datas(int index) const;
  ::wukong::pb::SyncData* _internal_add_datas();
  public:
  const ::wukong::pb::SyncData& datas(int index) const;
  ::wukong::pb::SyncData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::SyncData >&
      datas() const;

  // repeated string removes = 5;
  int removes_size() const;
  private:
  int _internal_removes_size() const;
  public:
  void clear_removes();
  const std::string& removes(int index) const;
  std::string* mutable_removes(int index);
  void set_removes(int index, const std::string& value);
  void set_removes(int index, std::string&& value);
  void set_removes(int index, const char* value);
  void set_removes(int index, const char* value, size_t size);
  std::string* add_removes();
  void add_removes(const std::string& value);
  void add_removes(std::string&& value);
  void add_removes(const char* value);
  void add_removes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& removes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_removes();
  private:
  const std::string& _internal_removes(int index) const;
  std::string* _internal_add_removes();
  public:

  // string lToken = 2;
  void clear_ltoken();
  const std::string& ltoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ltoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ltoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_ltoken();
  void set_allocated_ltoken(std::string* ltoken);
  private:
  const std::string& _internal_ltoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ltoken(const std::string& value);
  std::string* _internal_mutable_ltoken();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roleId = 3;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.SyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::SyncData > datas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> removes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RSHeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.RSHeartbeatRequest) */ {
 public:
  inline RSHeartbeatRequest() : RSHeartbeatRequest(nullptr) {}
  ~RSHeartbeatRequest() override;
  explicit constexpr RSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSHeartbeatRequest(const RSHeartbeatRequest& from);
  RSHeartbeatRequest(RSHeartbeatRequest&& from) noexcept
    : RSHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline RSHeartbeatRequest& operator=(const RSHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSHeartbeatRequest& operator=(RSHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const RSHeartbeatRequest*>(
               &_RSHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RSHeartbeatRequest& a, RSHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RSHeartbeatRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RSHeartbeatRequest* New() const final {
    return new RSHeartbeatRequest();
  }

  RSHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RSHeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSHeartbeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSHeartbeatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSHeartbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.RSHeartbeatRequest";
  }
  protected:
  explicit RSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLTokenFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string lToken = 3;
  void clear_ltoken();
  const std::string& ltoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ltoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ltoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_ltoken();
  void set_allocated_ltoken(std::string* ltoken);
  private:
  const std::string& _internal_ltoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ltoken(const std::string& value);
  std::string* _internal_mutable_ltoken();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.RSHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_5fservice_2eproto;
};
// ===================================================================

class RecordService_Stub;

class RecordService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RecordService() {};
 public:
  virtual ~RecordService();

  typedef RecordService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::OnlineCounts* response,
                       ::google::protobuf::Closure* done);
  virtual void loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadRoleDataRequest* request,
                       ::wukong::pb::LoadRoleDataResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SyncRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::RSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RecordService);
};

class RecordService_Stub : public RecordService {
 public:
  RecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RecordService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RecordService ------------------------------------------

  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::OnlineCounts* response,
                       ::google::protobuf::Closure* done);
  void loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadRoleDataRequest* request,
                       ::wukong::pb::LoadRoleDataResponse* response,
                       ::google::protobuf::Closure* done);
  void sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SyncRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::RSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RecordService_Stub);
};


// -------------------------------------------------------------------

class InnerRecordService_Stub;

class InnerRecordService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InnerRecordService() {};
 public:
  virtual ~InnerRecordService();

  typedef InnerRecordService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::Uint32Value* response,
                       ::google::protobuf::Closure* done);
  virtual void loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadRoleDataRequest* request,
                       ::wukong::pb::LoadRoleDataResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SyncRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  virtual void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::RSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerRecordService);
};

class InnerRecordService_Stub : public InnerRecordService {
 public:
  InnerRecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  InnerRecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~InnerRecordService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements InnerRecordService ------------------------------------------

  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::wukong::pb::Uint32Value* response,
                       ::google::protobuf::Closure* done);
  void loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadRoleDataRequest* request,
                       ::wukong::pb::LoadRoleDataResponse* response,
                       ::google::protobuf::Closure* done);
  void sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::SyncRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
  void heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::RSHeartbeatRequest* request,
                       ::wukong::pb::BoolValue* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerRecordService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadRoleDataRequest

// uint32 serverId = 1;
inline void LoadRoleDataRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataRequest.serverId)
  return _internal_serverid();
}
inline void LoadRoleDataRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void LoadRoleDataRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataRequest.serverId)
}

// string lToken = 2;
inline void LoadRoleDataRequest::clear_ltoken() {
  ltoken_.ClearToEmpty();
}
inline const std::string& LoadRoleDataRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataRequest.lToken)
  return _internal_ltoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadRoleDataRequest::set_ltoken(ArgT0&& arg0, ArgT... args) {
 
 ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataRequest.lToken)
}
inline std::string* LoadRoleDataRequest::mutable_ltoken() {
  std::string* _s = _internal_mutable_ltoken();
  // @@protoc_insertion_point(field_mutable:wukong.pb.LoadRoleDataRequest.lToken)
  return _s;
}
inline const std::string& LoadRoleDataRequest::_internal_ltoken() const {
  return ltoken_.Get();
}
inline void LoadRoleDataRequest::_internal_set_ltoken(const std::string& value) {
  
  ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadRoleDataRequest::_internal_mutable_ltoken() {
  
  return ltoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadRoleDataRequest::release_ltoken() {
  // @@protoc_insertion_point(field_release:wukong.pb.LoadRoleDataRequest.lToken)
  return ltoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadRoleDataRequest::set_allocated_ltoken(std::string* ltoken) {
  if (ltoken != nullptr) {
    
  } else {
    
  }
  ltoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ltoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.LoadRoleDataRequest.lToken)
}

// uint32 roleId = 3;
inline void LoadRoleDataRequest::clear_roleid() {
  roleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataRequest.roleId)
  return _internal_roleid();
}
inline void LoadRoleDataRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roleid_ = value;
}
inline void LoadRoleDataRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataRequest.roleId)
}

// -------------------------------------------------------------------

// LoadRoleDataResponse

// uint32 errCode = 1;
inline void LoadRoleDataResponse::clear_errcode() {
  errcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataResponse::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataResponse::errcode() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataResponse.errCode)
  return _internal_errcode();
}
inline void LoadRoleDataResponse::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errcode_ = value;
}
inline void LoadRoleDataResponse::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataResponse.errCode)
}

// uint32 serverId = 2;
inline void LoadRoleDataResponse::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataResponse::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadRoleDataResponse::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataResponse.serverId)
  return _internal_serverid();
}
inline void LoadRoleDataResponse::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void LoadRoleDataResponse::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataResponse.serverId)
}

// bytes data = 3;
inline void LoadRoleDataResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& LoadRoleDataResponse::data() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadRoleDataResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadRoleDataResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.LoadRoleDataResponse.data)
}
inline std::string* LoadRoleDataResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:wukong.pb.LoadRoleDataResponse.data)
  return _s;
}
inline const std::string& LoadRoleDataResponse::_internal_data() const {
  return data_.Get();
}
inline void LoadRoleDataResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadRoleDataResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadRoleDataResponse::release_data() {
  // @@protoc_insertion_point(field_release:wukong.pb.LoadRoleDataResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadRoleDataResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.LoadRoleDataResponse.data)
}

// -------------------------------------------------------------------

// SyncData

// string key = 1;
inline void SyncData::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SyncData::key() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncData::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.SyncData.key)
}
inline std::string* SyncData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:wukong.pb.SyncData.key)
  return _s;
}
inline const std::string& SyncData::_internal_key() const {
  return key_.Get();
}
inline void SyncData::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncData::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncData::release_key() {
  // @@protoc_insertion_point(field_release:wukong.pb.SyncData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.SyncData.key)
}

// bytes value = 2;
inline void SyncData::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& SyncData::value() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncData::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.SyncData.value)
}
inline std::string* SyncData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:wukong.pb.SyncData.value)
  return _s;
}
inline const std::string& SyncData::_internal_value() const {
  return value_.Get();
}
inline void SyncData::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncData::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncData::release_value() {
  // @@protoc_insertion_point(field_release:wukong.pb.SyncData.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.SyncData.value)
}

// -------------------------------------------------------------------

// SyncRequest

// uint32 serverId = 1;
inline void SyncRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncRequest.serverId)
  return _internal_serverid();
}
inline void SyncRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void SyncRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SyncRequest.serverId)
}

// string lToken = 2;
inline void SyncRequest::clear_ltoken() {
  ltoken_.ClearToEmpty();
}
inline const std::string& SyncRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncRequest.lToken)
  return _internal_ltoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncRequest::set_ltoken(ArgT0&& arg0, ArgT... args) {
 
 ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.SyncRequest.lToken)
}
inline std::string* SyncRequest::mutable_ltoken() {
  std::string* _s = _internal_mutable_ltoken();
  // @@protoc_insertion_point(field_mutable:wukong.pb.SyncRequest.lToken)
  return _s;
}
inline const std::string& SyncRequest::_internal_ltoken() const {
  return ltoken_.Get();
}
inline void SyncRequest::_internal_set_ltoken(const std::string& value) {
  
  ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_ltoken() {
  
  return ltoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncRequest::release_ltoken() {
  // @@protoc_insertion_point(field_release:wukong.pb.SyncRequest.lToken)
  return ltoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncRequest::set_allocated_ltoken(std::string* ltoken) {
  if (ltoken != nullptr) {
    
  } else {
    
  }
  ltoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ltoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.SyncRequest.lToken)
}

// uint32 roleId = 3;
inline void SyncRequest::clear_roleid() {
  roleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncRequest.roleId)
  return _internal_roleid();
}
inline void SyncRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roleid_ = value;
}
inline void SyncRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SyncRequest.roleId)
}

// repeated .wukong.pb.SyncData datas = 4;
inline int SyncRequest::_internal_datas_size() const {
  return datas_.size();
}
inline int SyncRequest::datas_size() const {
  return _internal_datas_size();
}
inline void SyncRequest::clear_datas() {
  datas_.Clear();
}
inline ::wukong::pb::SyncData* SyncRequest::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.SyncRequest.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::SyncData >*
SyncRequest::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.SyncRequest.datas)
  return &datas_;
}
inline const ::wukong::pb::SyncData& SyncRequest::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::wukong::pb::SyncData& SyncRequest::datas(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncRequest.datas)
  return _internal_datas(index);
}
inline ::wukong::pb::SyncData* SyncRequest::_internal_add_datas() {
  return datas_.Add();
}
inline ::wukong::pb::SyncData* SyncRequest::add_datas() {
  ::wukong::pb::SyncData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:wukong.pb.SyncRequest.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wukong::pb::SyncData >&
SyncRequest::datas() const {
  // @@protoc_insertion_point(field_list:wukong.pb.SyncRequest.datas)
  return datas_;
}

// repeated string removes = 5;
inline int SyncRequest::_internal_removes_size() const {
  return removes_.size();
}
inline int SyncRequest::removes_size() const {
  return _internal_removes_size();
}
inline void SyncRequest::clear_removes() {
  removes_.Clear();
}
inline std::string* SyncRequest::add_removes() {
  std::string* _s = _internal_add_removes();
  // @@protoc_insertion_point(field_add_mutable:wukong.pb.SyncRequest.removes)
  return _s;
}
inline const std::string& SyncRequest::_internal_removes(int index) const {
  return removes_.Get(index);
}
inline const std::string& SyncRequest::removes(int index) const {
  // @@protoc_insertion_point(field_get:wukong.pb.SyncRequest.removes)
  return _internal_removes(index);
}
inline std::string* SyncRequest::mutable_removes(int index) {
  // @@protoc_insertion_point(field_mutable:wukong.pb.SyncRequest.removes)
  return removes_.Mutable(index);
}
inline void SyncRequest::set_removes(int index, const std::string& value) {
  removes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::set_removes(int index, std::string&& value) {
  removes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::set_removes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::set_removes(int index, const char* value, size_t size) {
  removes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wukong.pb.SyncRequest.removes)
}
inline std::string* SyncRequest::_internal_add_removes() {
  return removes_.Add();
}
inline void SyncRequest::add_removes(const std::string& value) {
  removes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::add_removes(std::string&& value) {
  removes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::add_removes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wukong.pb.SyncRequest.removes)
}
inline void SyncRequest::add_removes(const char* value, size_t size) {
  removes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wukong.pb.SyncRequest.removes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncRequest::removes() const {
  // @@protoc_insertion_point(field_list:wukong.pb.SyncRequest.removes)
  return removes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncRequest::mutable_removes() {
  // @@protoc_insertion_point(field_mutable_list:wukong.pb.SyncRequest.removes)
  return &removes_;
}

// -------------------------------------------------------------------

// RSHeartbeatRequest

// uint32 serverId = 1;
inline void RSHeartbeatRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSHeartbeatRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSHeartbeatRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.RSHeartbeatRequest.serverId)
  return _internal_serverid();
}
inline void RSHeartbeatRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void RSHeartbeatRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.RSHeartbeatRequest.serverId)
}

// uint32 roleId = 2;
inline void RSHeartbeatRequest::clear_roleid() {
  roleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSHeartbeatRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSHeartbeatRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.RSHeartbeatRequest.roleId)
  return _internal_roleid();
}
inline void RSHeartbeatRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roleid_ = value;
}
inline void RSHeartbeatRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.RSHeartbeatRequest.roleId)
}

// string lToken = 3;
inline void RSHeartbeatRequest::clear_ltoken() {
  ltoken_.ClearToEmpty();
}
inline const std::string& RSHeartbeatRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.RSHeartbeatRequest.lToken)
  return _internal_ltoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RSHeartbeatRequest::set_ltoken(ArgT0&& arg0, ArgT... args) {
 
 ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.RSHeartbeatRequest.lToken)
}
inline std::string* RSHeartbeatRequest::mutable_ltoken() {
  std::string* _s = _internal_mutable_ltoken();
  // @@protoc_insertion_point(field_mutable:wukong.pb.RSHeartbeatRequest.lToken)
  return _s;
}
inline const std::string& RSHeartbeatRequest::_internal_ltoken() const {
  return ltoken_.Get();
}
inline void RSHeartbeatRequest::_internal_set_ltoken(const std::string& value) {
  
  ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RSHeartbeatRequest::_internal_mutable_ltoken() {
  
  return ltoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RSHeartbeatRequest::release_ltoken() {
  // @@protoc_insertion_point(field_release:wukong.pb.RSHeartbeatRequest.lToken)
  return ltoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RSHeartbeatRequest::set_allocated_ltoken(std::string* ltoken) {
  if (ltoken != nullptr) {
    
  } else {
    
  }
  ltoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ltoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.RSHeartbeatRequest.lToken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_5fservice_2eproto
