// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fservice_2eproto;
namespace wukong {
namespace pb {
class EnterGameRequest;
struct EnterGameRequestDefaultTypeInternal;
extern EnterGameRequestDefaultTypeInternal _EnterGameRequest_default_instance_;
class ForwardInRequest;
struct ForwardInRequestDefaultTypeInternal;
extern ForwardInRequestDefaultTypeInternal _ForwardInRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::EnterGameRequest* Arena::CreateMaybeMessage<::wukong::pb::EnterGameRequest>(Arena*);
template<> ::wukong::pb::ForwardInRequest* Arena::CreateMaybeMessage<::wukong::pb::ForwardInRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class ForwardInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.ForwardInRequest) */ {
 public:
  inline ForwardInRequest() : ForwardInRequest(nullptr) {}
  ~ForwardInRequest() override;
  explicit constexpr ForwardInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardInRequest(const ForwardInRequest& from);
  ForwardInRequest(ForwardInRequest&& from) noexcept
    : ForwardInRequest() {
    *this = ::std::move(from);
  }

  inline ForwardInRequest& operator=(const ForwardInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardInRequest& operator=(ForwardInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardInRequest* internal_default_instance() {
    return reinterpret_cast<const ForwardInRequest*>(
               &_ForwardInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ForwardInRequest& a, ForwardInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardInRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardInRequest* New() const final {
    return new ForwardInRequest();
  }

  ForwardInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ForwardInRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.ForwardInRequest";
  }
  protected:
  explicit ForwardInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawMsgFieldNumber = 5,
    kServerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTagFieldNumber = 3,
    kRoleIdFieldNumber = 4,
  };
  // bytes rawMsg = 5;
  void clear_rawmsg();
  const std::string& rawmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rawmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rawmsg();
  PROTOBUF_MUST_USE_RESULT std::string* release_rawmsg();
  void set_allocated_rawmsg(std::string* rawmsg);
  private:
  const std::string& _internal_rawmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawmsg(const std::string& value);
  std::string* _internal_mutable_rawmsg();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 tag = 3;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roleId = 4;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.ForwardInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnterGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.EnterGameRequest) */ {
 public:
  inline EnterGameRequest() : EnterGameRequest(nullptr) {}
  ~EnterGameRequest() override;
  explicit constexpr EnterGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterGameRequest(const EnterGameRequest& from);
  EnterGameRequest(EnterGameRequest&& from) noexcept
    : EnterGameRequest() {
    *this = ::std::move(from);
  }

  inline EnterGameRequest& operator=(const EnterGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterGameRequest& operator=(EnterGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterGameRequest* internal_default_instance() {
    return reinterpret_cast<const EnterGameRequest*>(
               &_EnterGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnterGameRequest& a, EnterGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterGameRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterGameRequest* New() const final {
    return new EnterGameRequest();
  }

  EnterGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterGameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnterGameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.EnterGameRequest";
  }
  protected:
  explicit EnterGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLTokenFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kGatewayIdFieldNumber = 4,
  };
  // string lToken = 3;
  void clear_ltoken();
  const std::string& ltoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ltoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ltoken();
  PROTOBUF_MUST_USE_RESULT std::string* release_ltoken();
  void set_allocated_ltoken(std::string* ltoken);
  private:
  const std::string& _internal_ltoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ltoken(const std::string& value);
  std::string* _internal_mutable_ltoken();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gatewayId = 4;
  void clear_gatewayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid() const;
  void set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gatewayid() const;
  void _internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.EnterGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fservice_2eproto;
};
// ===================================================================

class GameService_Stub;

class GameService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameService() {};
 public:
  virtual ~GameService();

  typedef GameService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void enterGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterGameRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameService);
};

class GameService_Stub : public GameService {
 public:
  GameService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameService ------------------------------------------

  void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void enterGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterGameRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameService_Stub);
};


// -------------------------------------------------------------------

class InnerGameService_Stub;

class InnerGameService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InnerGameService() {};
 public:
  virtual ~InnerGameService();

  typedef InnerGameService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void enterGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterGameRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerGameService);
};

class InnerGameService_Stub : public InnerGameService {
 public:
  InnerGameService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  InnerGameService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~InnerGameService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements InnerGameService ------------------------------------------

  void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void enterGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterGameRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InnerGameService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ForwardInRequest

// uint32 serverId = 1;
inline void ForwardInRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardInRequest.serverId)
  return _internal_serverid();
}
inline void ForwardInRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void ForwardInRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardInRequest.serverId)
}

// int32 type = 2;
inline void ForwardInRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForwardInRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForwardInRequest::type() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardInRequest.type)
  return _internal_type();
}
inline void ForwardInRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ForwardInRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardInRequest.type)
}

// uint32 tag = 3;
inline void ForwardInRequest::clear_tag() {
  tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::tag() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardInRequest.tag)
  return _internal_tag();
}
inline void ForwardInRequest::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_ = value;
}
inline void ForwardInRequest::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardInRequest.tag)
}

// uint32 roleId = 4;
inline void ForwardInRequest::clear_roleid() {
  roleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardInRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardInRequest.roleId)
  return _internal_roleid();
}
inline void ForwardInRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roleid_ = value;
}
inline void ForwardInRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardInRequest.roleId)
}

// bytes rawMsg = 5;
inline void ForwardInRequest::clear_rawmsg() {
  rawmsg_.ClearToEmpty();
}
inline const std::string& ForwardInRequest::rawmsg() const {
  // @@protoc_insertion_point(field_get:wukong.pb.ForwardInRequest.rawMsg)
  return _internal_rawmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardInRequest::set_rawmsg(ArgT0&& arg0, ArgT... args) {
 
 rawmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.ForwardInRequest.rawMsg)
}
inline std::string* ForwardInRequest::mutable_rawmsg() {
  std::string* _s = _internal_mutable_rawmsg();
  // @@protoc_insertion_point(field_mutable:wukong.pb.ForwardInRequest.rawMsg)
  return _s;
}
inline const std::string& ForwardInRequest::_internal_rawmsg() const {
  return rawmsg_.Get();
}
inline void ForwardInRequest::_internal_set_rawmsg(const std::string& value) {
  
  rawmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ForwardInRequest::_internal_mutable_rawmsg() {
  
  return rawmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ForwardInRequest::release_rawmsg() {
  // @@protoc_insertion_point(field_release:wukong.pb.ForwardInRequest.rawMsg)
  return rawmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ForwardInRequest::set_allocated_rawmsg(std::string* rawmsg) {
  if (rawmsg != nullptr) {
    
  } else {
    
  }
  rawmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawmsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.ForwardInRequest.rawMsg)
}

// -------------------------------------------------------------------

// EnterGameRequest

// uint32 serverId = 1;
inline void EnterGameRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterGameRequest.serverId)
  return _internal_serverid();
}
inline void EnterGameRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void EnterGameRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterGameRequest.serverId)
}

// uint32 roleId = 2;
inline void EnterGameRequest::clear_roleid() {
  roleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterGameRequest.roleId)
  return _internal_roleid();
}
inline void EnterGameRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roleid_ = value;
}
inline void EnterGameRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterGameRequest.roleId)
}

// string lToken = 3;
inline void EnterGameRequest::clear_ltoken() {
  ltoken_.ClearToEmpty();
}
inline const std::string& EnterGameRequest::ltoken() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterGameRequest.lToken)
  return _internal_ltoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterGameRequest::set_ltoken(ArgT0&& arg0, ArgT... args) {
 
 ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.EnterGameRequest.lToken)
}
inline std::string* EnterGameRequest::mutable_ltoken() {
  std::string* _s = _internal_mutable_ltoken();
  // @@protoc_insertion_point(field_mutable:wukong.pb.EnterGameRequest.lToken)
  return _s;
}
inline const std::string& EnterGameRequest::_internal_ltoken() const {
  return ltoken_.Get();
}
inline void EnterGameRequest::_internal_set_ltoken(const std::string& value) {
  
  ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterGameRequest::_internal_mutable_ltoken() {
  
  return ltoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterGameRequest::release_ltoken() {
  // @@protoc_insertion_point(field_release:wukong.pb.EnterGameRequest.lToken)
  return ltoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterGameRequest::set_allocated_ltoken(std::string* ltoken) {
  if (ltoken != nullptr) {
    
  } else {
    
  }
  ltoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ltoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.EnterGameRequest.lToken)
}

// uint32 gatewayId = 4;
inline void EnterGameRequest::clear_gatewayid() {
  gatewayid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::_internal_gatewayid() const {
  return gatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGameRequest::gatewayid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterGameRequest.gatewayId)
  return _internal_gatewayid();
}
inline void EnterGameRequest::_internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gatewayid_ = value;
}
inline void EnterGameRequest::set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gatewayid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterGameRequest.gatewayId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fservice_2eproto
