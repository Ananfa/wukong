syntax = "proto3";

import "corpc_option.proto";
import "common.proto";

option cc_generic_services = true;

package wukong.pb;

message HeartbeatRequest {
    uint32 userId = 1;
    uint32 roleId = 2;
    uint32 serverType = 3;
    uint32 serverId = 4;
}

message ForwardOutTarget {
    uint32 userId = 1;
    uint32 roleId = 2;
}

message ForwardOutRequest {
    int32 type = 1; // 消息类型
    uint32 tag = 2; // 消息tag（用于客户端与服务器RPC）
    repeated ForwardOutTarget targets = 3; // 发送目标
    bytes rawMsg = 4; // 原始消息数据
}

service GatewayService {
	option (corpc.global_service_id) = 1;

    // 关服（关闭Gateway后，内部服务中的游戏对象会在心跳失败时销毁并存盘，因此只需对gateway进行shutdown）
    rpc shutdown(corpc.Void) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true; // default is false
    }

    // 踢出指定玩家
    rpc kick(Uint32Value) returns(BoolValue)
    {
        option (corpc.need_coroutine) = true; // default is false
    }

    // 获取在线玩家数，用于负载均衡（超时时间2秒，超时表示网关负载过高，后续不被继续分配）
    rpc getOnlineCount(corpc.Void) returns(Uint32Value)
    {
        option (corpc.timeout) = 2000; // default is 0
    }

    rpc forwardOut(ForwardOutRequest) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true; // default is false
    }

    // 玩家游戏对象向路由对象定时报告位置
    rpc heartbeat(HeartbeatRequest) returns(BoolValue);
}