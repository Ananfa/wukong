// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
#include "common.pb.h"
#include "inner_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fservice_2eproto;
namespace wukong {
namespace pb {
class EnterSceneRequest;
struct EnterSceneRequestDefaultTypeInternal;
extern EnterSceneRequestDefaultTypeInternal _EnterSceneRequest_default_instance_;
class LoadSceneRequest;
struct LoadSceneRequestDefaultTypeInternal;
extern LoadSceneRequestDefaultTypeInternal _LoadSceneRequest_default_instance_;
class LoadSceneResponse;
struct LoadSceneResponseDefaultTypeInternal;
extern LoadSceneResponseDefaultTypeInternal _LoadSceneResponse_default_instance_;
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> ::wukong::pb::EnterSceneRequest* Arena::CreateMaybeMessage<::wukong::pb::EnterSceneRequest>(Arena*);
template<> ::wukong::pb::LoadSceneRequest* Arena::CreateMaybeMessage<::wukong::pb::LoadSceneRequest>(Arena*);
template<> ::wukong::pb::LoadSceneResponse* Arena::CreateMaybeMessage<::wukong::pb::LoadSceneResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wukong {
namespace pb {

// ===================================================================

class LoadSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.LoadSceneRequest) */ {
 public:
  inline LoadSceneRequest() : LoadSceneRequest(nullptr) {}
  ~LoadSceneRequest() override;
  explicit constexpr LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneRequest(const LoadSceneRequest& from);
  LoadSceneRequest(LoadSceneRequest&& from) noexcept
    : LoadSceneRequest() {
    *this = ::std::move(from);
  }

  inline LoadSceneRequest& operator=(const LoadSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneRequest& operator=(LoadSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneRequest* internal_default_instance() {
    return reinterpret_cast<const LoadSceneRequest*>(
               &_LoadSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadSceneRequest& a, LoadSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneRequest* New() const final {
    return new LoadSceneRequest();
  }

  LoadSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadSceneRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.LoadSceneRequest";
  }
  protected:
  explicit LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 3,
    kTeamIdFieldNumber = 5,
    kServerIdFieldNumber = 1,
    kDefIdFieldNumber = 2,
    kRoleIdFieldNumber = 4,
  };
  // string sceneId = 3;
  void clear_sceneid();
  const std::string& sceneid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sceneid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sceneid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // string teamId = 5;
  void clear_teamid();
  const std::string& teamid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teamid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teamid();
  PROTOBUF_MUST_USE_RESULT std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 defId = 2;
  void clear_defid();
  ::PROTOBUF_NAMESPACE_ID::uint32 defid() const;
  void set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defid() const;
  void _internal_set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 roleId = 4;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.LoadSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.LoadSceneResponse) */ {
 public:
  inline LoadSceneResponse() : LoadSceneResponse(nullptr) {}
  ~LoadSceneResponse() override;
  explicit constexpr LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSceneResponse(const LoadSceneResponse& from);
  LoadSceneResponse(LoadSceneResponse&& from) noexcept
    : LoadSceneResponse() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse& operator=(const LoadSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse& operator=(LoadSceneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSceneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSceneResponse* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse*>(
               &_LoadSceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadSceneResponse& a, LoadSceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneResponse* New() const final {
    return new LoadSceneResponse();
  }

  LoadSceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSceneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadSceneResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.LoadSceneResponse";
  }
  protected:
  explicit LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string sceneId = 2;
  void clear_sceneid();
  const std::string& sceneid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sceneid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sceneid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // uint32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.LoadSceneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EnterSceneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wukong.pb.EnterSceneRequest) */ {
 public:
  inline EnterSceneRequest() : EnterSceneRequest(nullptr) {}
  ~EnterSceneRequest() override;
  explicit constexpr EnterSceneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterSceneRequest(const EnterSceneRequest& from);
  EnterSceneRequest(EnterSceneRequest&& from) noexcept
    : EnterSceneRequest() {
    *this = ::std::move(from);
  }

  inline EnterSceneRequest& operator=(const EnterSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterSceneRequest& operator=(EnterSceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterSceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterSceneRequest* internal_default_instance() {
    return reinterpret_cast<const EnterSceneRequest*>(
               &_EnterSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnterSceneRequest& a, EnterSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterSceneRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterSceneRequest* New() const final {
    return new EnterSceneRequest();
  }

  EnterSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterSceneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterSceneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnterSceneRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterSceneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wukong.pb.EnterSceneRequest";
  }
  protected:
  explicit EnterSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 4,
    kRoleIdFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kGatewayIdFieldNumber = 3,
  };
  // string sceneId = 4;
  void clear_sceneid();
  const std::string& sceneid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sceneid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sceneid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // uint64 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gatewayId = 3;
  void clear_gatewayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid() const;
  void set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gatewayid() const;
  void _internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wukong.pb.EnterSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gatewayid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fservice_2eproto;
};
// ===================================================================

class SceneService_Stub;

class SceneService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SceneService() {};
 public:
  virtual ~SceneService();

  typedef SceneService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  virtual void loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadSceneRequest* request,
                       ::wukong::pb::LoadSceneResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterSceneRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SceneService);
};

class SceneService_Stub : public SceneService {
 public:
  SceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SceneService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SceneService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SceneService ------------------------------------------

  void shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void forwardIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::ForwardInRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
  void loadScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::LoadSceneRequest* request,
                       ::wukong::pb::LoadSceneResponse* response,
                       ::google::protobuf::Closure* done);
  void enterScene(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::wukong::pb::EnterSceneRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SceneService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadSceneRequest

// uint32 serverId = 1;
inline void LoadSceneRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneRequest.serverId)
  return _internal_serverid();
}
inline void LoadSceneRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void LoadSceneRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneRequest.serverId)
}

// uint32 defId = 2;
inline void LoadSceneRequest::clear_defid() {
  defid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneRequest::_internal_defid() const {
  return defid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneRequest::defid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneRequest.defId)
  return _internal_defid();
}
inline void LoadSceneRequest::_internal_set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  defid_ = value;
}
inline void LoadSceneRequest::set_defid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneRequest.defId)
}

// string sceneId = 3;
inline void LoadSceneRequest::clear_sceneid() {
  sceneid_.ClearToEmpty();
}
inline const std::string& LoadSceneRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneRequest.sceneId)
  return _internal_sceneid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneRequest::set_sceneid(ArgT0&& arg0, ArgT... args) {
 
 sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneRequest.sceneId)
}
inline std::string* LoadSceneRequest::mutable_sceneid() {
  std::string* _s = _internal_mutable_sceneid();
  // @@protoc_insertion_point(field_mutable:wukong.pb.LoadSceneRequest.sceneId)
  return _s;
}
inline const std::string& LoadSceneRequest::_internal_sceneid() const {
  return sceneid_.Get();
}
inline void LoadSceneRequest::_internal_set_sceneid(const std::string& value) {
  
  sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::_internal_mutable_sceneid() {
  
  return sceneid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::release_sceneid() {
  // @@protoc_insertion_point(field_release:wukong.pb.LoadSceneRequest.sceneId)
  return sceneid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadSceneRequest::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    
  } else {
    
  }
  sceneid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.LoadSceneRequest.sceneId)
}

// uint64 roleId = 4;
inline void LoadSceneRequest::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadSceneRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadSceneRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneRequest.roleId)
  return _internal_roleid();
}
inline void LoadSceneRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roleid_ = value;
}
inline void LoadSceneRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneRequest.roleId)
}

// string teamId = 5;
inline void LoadSceneRequest::clear_teamid() {
  teamid_.ClearToEmpty();
}
inline const std::string& LoadSceneRequest::teamid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneRequest.teamId)
  return _internal_teamid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneRequest::set_teamid(ArgT0&& arg0, ArgT... args) {
 
 teamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneRequest.teamId)
}
inline std::string* LoadSceneRequest::mutable_teamid() {
  std::string* _s = _internal_mutable_teamid();
  // @@protoc_insertion_point(field_mutable:wukong.pb.LoadSceneRequest.teamId)
  return _s;
}
inline const std::string& LoadSceneRequest::_internal_teamid() const {
  return teamid_.Get();
}
inline void LoadSceneRequest::_internal_set_teamid(const std::string& value) {
  
  teamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::_internal_mutable_teamid() {
  
  return teamid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadSceneRequest::release_teamid() {
  // @@protoc_insertion_point(field_release:wukong.pb.LoadSceneRequest.teamId)
  return teamid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadSceneRequest::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    
  } else {
    
  }
  teamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.LoadSceneRequest.teamId)
}

// -------------------------------------------------------------------

// LoadSceneResponse

// uint32 errCode = 1;
inline void LoadSceneResponse::clear_errcode() {
  errcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneResponse::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadSceneResponse::errcode() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneResponse.errCode)
  return _internal_errcode();
}
inline void LoadSceneResponse::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errcode_ = value;
}
inline void LoadSceneResponse::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneResponse.errCode)
}

// string sceneId = 2;
inline void LoadSceneResponse::clear_sceneid() {
  sceneid_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse::sceneid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.LoadSceneResponse.sceneId)
  return _internal_sceneid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadSceneResponse::set_sceneid(ArgT0&& arg0, ArgT... args) {
 
 sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.LoadSceneResponse.sceneId)
}
inline std::string* LoadSceneResponse::mutable_sceneid() {
  std::string* _s = _internal_mutable_sceneid();
  // @@protoc_insertion_point(field_mutable:wukong.pb.LoadSceneResponse.sceneId)
  return _s;
}
inline const std::string& LoadSceneResponse::_internal_sceneid() const {
  return sceneid_.Get();
}
inline void LoadSceneResponse::_internal_set_sceneid(const std::string& value) {
  
  sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse::_internal_mutable_sceneid() {
  
  return sceneid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadSceneResponse::release_sceneid() {
  // @@protoc_insertion_point(field_release:wukong.pb.LoadSceneResponse.sceneId)
  return sceneid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadSceneResponse::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    
  } else {
    
  }
  sceneid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.LoadSceneResponse.sceneId)
}

// -------------------------------------------------------------------

// EnterSceneRequest

// uint32 serverId = 1;
inline void EnterSceneRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterSceneRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterSceneRequest::serverid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterSceneRequest.serverId)
  return _internal_serverid();
}
inline void EnterSceneRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void EnterSceneRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterSceneRequest.serverId)
}

// uint64 roleId = 2;
inline void EnterSceneRequest::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterSceneRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterSceneRequest::roleid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterSceneRequest.roleId)
  return _internal_roleid();
}
inline void EnterSceneRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roleid_ = value;
}
inline void EnterSceneRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterSceneRequest.roleId)
}

// uint32 gatewayId = 3;
inline void EnterSceneRequest::clear_gatewayid() {
  gatewayid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterSceneRequest::_internal_gatewayid() const {
  return gatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterSceneRequest::gatewayid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterSceneRequest.gatewayId)
  return _internal_gatewayid();
}
inline void EnterSceneRequest::_internal_set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gatewayid_ = value;
}
inline void EnterSceneRequest::set_gatewayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gatewayid(value);
  // @@protoc_insertion_point(field_set:wukong.pb.EnterSceneRequest.gatewayId)
}

// string sceneId = 4;
inline void EnterSceneRequest::clear_sceneid() {
  sceneid_.ClearToEmpty();
}
inline const std::string& EnterSceneRequest::sceneid() const {
  // @@protoc_insertion_point(field_get:wukong.pb.EnterSceneRequest.sceneId)
  return _internal_sceneid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterSceneRequest::set_sceneid(ArgT0&& arg0, ArgT... args) {
 
 sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wukong.pb.EnterSceneRequest.sceneId)
}
inline std::string* EnterSceneRequest::mutable_sceneid() {
  std::string* _s = _internal_mutable_sceneid();
  // @@protoc_insertion_point(field_mutable:wukong.pb.EnterSceneRequest.sceneId)
  return _s;
}
inline const std::string& EnterSceneRequest::_internal_sceneid() const {
  return sceneid_.Get();
}
inline void EnterSceneRequest::_internal_set_sceneid(const std::string& value) {
  
  sceneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterSceneRequest::_internal_mutable_sceneid() {
  
  return sceneid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterSceneRequest::release_sceneid() {
  // @@protoc_insertion_point(field_release:wukong.pb.EnterSceneRequest.sceneId)
  return sceneid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterSceneRequest::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    
  } else {
    
  }
  sceneid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wukong.pb.EnterSceneRequest.sceneId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace wukong

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_5fservice_2eproto
