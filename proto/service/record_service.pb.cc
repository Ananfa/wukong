// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record_service.proto

#include "record_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wukong {
namespace pb {
constexpr LoadRoleDataRequest::LoadRoleDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roleid_(uint64_t{0u})
  , serverid_(0u){}
struct LoadRoleDataRequestDefaultTypeInternal {
  constexpr LoadRoleDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadRoleDataRequestDefaultTypeInternal() {}
  union {
    LoadRoleDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadRoleDataRequestDefaultTypeInternal _LoadRoleDataRequest_default_instance_;
constexpr LoadRoleDataResponse::LoadRoleDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errcode_(0u)
  , serverid_(0u)
  , userid_(uint64_t{0u}){}
struct LoadRoleDataResponseDefaultTypeInternal {
  constexpr LoadRoleDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadRoleDataResponseDefaultTypeInternal() {}
  union {
    LoadRoleDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadRoleDataResponseDefaultTypeInternal _LoadRoleDataResponse_default_instance_;
constexpr SyncData::SyncData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SyncDataDefaultTypeInternal {
  constexpr SyncDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncDataDefaultTypeInternal() {}
  union {
    SyncData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncDataDefaultTypeInternal _SyncData_default_instance_;
constexpr SyncRequest::SyncRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datas_()
  , removes_()
  , ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roleid_(uint64_t{0u})
  , serverid_(0u){}
struct SyncRequestDefaultTypeInternal {
  constexpr SyncRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncRequestDefaultTypeInternal() {}
  union {
    SyncRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
constexpr RSHeartbeatRequest::RSHeartbeatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roleid_(uint64_t{0u})
  , serverid_(0u){}
struct RSHeartbeatRequestDefaultTypeInternal {
  constexpr RSHeartbeatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSHeartbeatRequestDefaultTypeInternal() {}
  union {
    RSHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSHeartbeatRequestDefaultTypeInternal _RSHeartbeatRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_record_5fservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_record_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_record_5fservice_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_record_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataRequest, ltoken_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataRequest, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataResponse, errcode_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataResponse, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::LoadRoleDataResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncData, key_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, ltoken_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, roleid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, datas_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SyncRequest, removes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::RSHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::RSHeartbeatRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::RSHeartbeatRequest, roleid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::RSHeartbeatRequest, ltoken_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wukong::pb::LoadRoleDataRequest)},
  { 8, -1, sizeof(::wukong::pb::LoadRoleDataResponse)},
  { 17, -1, sizeof(::wukong::pb::SyncData)},
  { 24, -1, sizeof(::wukong::pb::SyncRequest)},
  { 34, -1, sizeof(::wukong::pb::RSHeartbeatRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_LoadRoleDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_LoadRoleDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_SyncData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_SyncRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_RSHeartbeatRequest_default_instance_),
};

const char descriptor_table_protodef_record_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024record_service.proto\022\twukong.pb\032\022corpc"
  "_option.proto\032\014common.proto\032\022inner_commo"
  "n.proto\"G\n\023LoadRoleDataRequest\022\020\n\010server"
  "Id\030\001 \001(\r\022\016\n\006lToken\030\002 \001(\t\022\016\n\006roleId\030\003 \001(\004"
  "\"W\n\024LoadRoleDataResponse\022\017\n\007errCode\030\001 \001("
  "\r\022\020\n\010serverId\030\002 \001(\r\022\016\n\006userId\030\003 \001(\004\022\014\n\004d"
  "ata\030\004 \001(\014\"&\n\010SyncData\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\014\"t\n\013SyncRequest\022\020\n\010serverId\030\001 \001"
  "(\r\022\016\n\006lToken\030\002 \001(\t\022\016\n\006roleId\030\003 \001(\004\022\"\n\005da"
  "tas\030\004 \003(\0132\023.wukong.pb.SyncData\022\017\n\007remove"
  "s\030\005 \003(\t\"F\n\022RSHeartbeatRequest\022\020\n\010serverI"
  "d\030\001 \001(\r\022\016\n\006roleId\030\002 \001(\004\022\016\n\006lToken\030\003 \001(\t2"
  "\351\002\n\rRecordService\022*\n\010shutdown\022\013.corpc.Vo"
  "id\032\013.corpc.Void\"\004\230\361\004\001\022A\n\016getOnlineCount\022"
  "\013.corpc.Void\032\027.wukong.pb.OnlineCounts\"\t\220"
  "\361\004\001\240\361\004\350\007\022U\n\014loadRoleData\022\036.wukong.pb.Loa"
  "dRoleDataRequest\032\037.wukong.pb.LoadRoleDat"
  "aResponse\"\004\220\361\004\001\022\?\n\004sync\022\026.wukong.pb.Sync"
  "Request\032\024.wukong.pb.BoolValue\"\t\220\361\004\001\240\361\004\320\017"
  "\022K\n\theartbeat\022\035.wukong.pb.RSHeartbeatReq"
  "uest\032\024.wukong.pb.BoolValue\"\t\220\361\004\001\240\361\004\320\017\032\004\200"
  "\361\004\0042\341\002\n\022InnerRecordService\022*\n\010shutdown\022\013"
  ".corpc.Void\032\013.corpc.Void\"\004\230\361\004\001\022<\n\016getOnl"
  "ineCount\022\013.corpc.Void\032\026.wukong.pb.Uint32"
  "Value\"\005\240\361\004\364\003\022U\n\014loadRoleData\022\036.wukong.pb"
  ".LoadRoleDataRequest\032\037.wukong.pb.LoadRol"
  "eDataResponse\"\004\220\361\004\001\022;\n\004sync\022\026.wukong.pb."
  "SyncRequest\032\024.wukong.pb.BoolValue\"\005\240\361\004\320\017"
  "\022G\n\theartbeat\022\035.wukong.pb.RSHeartbeatReq"
  "uest\032\024.wukong.pb.BoolValue\"\005\240\361\004\320\017\032\004\200\361\004\004B"
  "\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_record_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_corpc_5foption_2eproto,
  &::descriptor_table_inner_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_record_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_record_5fservice_2eproto = {
  false, false, 1212, descriptor_table_protodef_record_5fservice_2eproto, "record_service.proto", 
  &descriptor_table_record_5fservice_2eproto_once, descriptor_table_record_5fservice_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_record_5fservice_2eproto::offsets,
  file_level_metadata_record_5fservice_2eproto, file_level_enum_descriptors_record_5fservice_2eproto, file_level_service_descriptors_record_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_record_5fservice_2eproto_getter() {
  return &descriptor_table_record_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_record_5fservice_2eproto(&descriptor_table_record_5fservice_2eproto);
namespace wukong {
namespace pb {

// ===================================================================

class LoadRoleDataRequest::_Internal {
 public:
};

LoadRoleDataRequest::LoadRoleDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.LoadRoleDataRequest)
}
LoadRoleDataRequest::LoadRoleDataRequest(const LoadRoleDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.LoadRoleDataRequest)
}

inline void LoadRoleDataRequest::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
}

LoadRoleDataRequest::~LoadRoleDataRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.LoadRoleDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadRoleDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadRoleDataRequest::ArenaDtor(void* object) {
  LoadRoleDataRequest* _this = reinterpret_cast< LoadRoleDataRequest* >(object);
  (void)_this;
}
void LoadRoleDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRoleDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadRoleDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.LoadRoleDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltoken_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRoleDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.LoadRoleDataRequest.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRoleDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.LoadRoleDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.LoadRoleDataRequest.lToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ltoken(), target);
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.LoadRoleDataRequest)
  return target;
}

size_t LoadRoleDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.LoadRoleDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadRoleDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadRoleDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadRoleDataRequest::GetClassData() const { return &_class_data_; }

void LoadRoleDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadRoleDataRequest *>(to)->MergeFrom(
      static_cast<const LoadRoleDataRequest &>(from));
}


void LoadRoleDataRequest::MergeFrom(const LoadRoleDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.LoadRoleDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadRoleDataRequest::CopyFrom(const LoadRoleDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.LoadRoleDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRoleDataRequest::IsInitialized() const {
  return true;
}

void LoadRoleDataRequest::InternalSwap(LoadRoleDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadRoleDataRequest, serverid_)
      + sizeof(LoadRoleDataRequest::serverid_)
      - PROTOBUF_FIELD_OFFSET(LoadRoleDataRequest, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRoleDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_record_5fservice_2eproto_getter, &descriptor_table_record_5fservice_2eproto_once,
      file_level_metadata_record_5fservice_2eproto[0]);
}

// ===================================================================

class LoadRoleDataResponse::_Internal {
 public:
};

LoadRoleDataResponse::LoadRoleDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.LoadRoleDataResponse)
}
LoadRoleDataResponse::LoadRoleDataResponse(const LoadRoleDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.LoadRoleDataResponse)
}

inline void LoadRoleDataResponse::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errcode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(userid_));
}

LoadRoleDataResponse::~LoadRoleDataResponse() {
  // @@protoc_insertion_point(destructor:wukong.pb.LoadRoleDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadRoleDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadRoleDataResponse::ArenaDtor(void* object) {
  LoadRoleDataResponse* _this = reinterpret_cast< LoadRoleDataResponse* >(object);
  (void)_this;
}
void LoadRoleDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRoleDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadRoleDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.LoadRoleDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRoleDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serverId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRoleDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.LoadRoleDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverid(), target);
  }

  // uint64 userId = 3;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_userid(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.LoadRoleDataResponse)
  return target;
}

size_t LoadRoleDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.LoadRoleDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // uint64 userId = 3;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadRoleDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadRoleDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadRoleDataResponse::GetClassData() const { return &_class_data_; }

void LoadRoleDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadRoleDataResponse *>(to)->MergeFrom(
      static_cast<const LoadRoleDataResponse &>(from));
}


void LoadRoleDataResponse::MergeFrom(const LoadRoleDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.LoadRoleDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadRoleDataResponse::CopyFrom(const LoadRoleDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.LoadRoleDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRoleDataResponse::IsInitialized() const {
  return true;
}

void LoadRoleDataResponse::InternalSwap(LoadRoleDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadRoleDataResponse, userid_)
      + sizeof(LoadRoleDataResponse::userid_)
      - PROTOBUF_FIELD_OFFSET(LoadRoleDataResponse, errcode_)>(
          reinterpret_cast<char*>(&errcode_),
          reinterpret_cast<char*>(&other->errcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRoleDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_record_5fservice_2eproto_getter, &descriptor_table_record_5fservice_2eproto_once,
      file_level_metadata_record_5fservice_2eproto[1]);
}

// ===================================================================

class SyncData::_Internal {
 public:
};

SyncData::SyncData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.SyncData)
}
SyncData::SyncData(const SyncData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:wukong.pb.SyncData)
}

inline void SyncData::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SyncData::~SyncData() {
  // @@protoc_insertion_point(destructor:wukong.pb.SyncData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SyncData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncData::ArenaDtor(void* object) {
  SyncData* _this = reinterpret_cast< SyncData* >(object);
  (void)_this;
}
void SyncData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncData::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.SyncData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.SyncData.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.SyncData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.SyncData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.SyncData)
  return target;
}

size_t SyncData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.SyncData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncData::GetClassData() const { return &_class_data_; }

void SyncData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SyncData *>(to)->MergeFrom(
      static_cast<const SyncData &>(from));
}


void SyncData::MergeFrom(const SyncData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.SyncData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncData::CopyFrom(const SyncData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.SyncData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncData::IsInitialized() const {
  return true;
}

void SyncData::InternalSwap(SyncData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_record_5fservice_2eproto_getter, &descriptor_table_record_5fservice_2eproto_once,
      file_level_metadata_record_5fservice_2eproto[2]);
}

// ===================================================================

class SyncRequest::_Internal {
 public:
};

SyncRequest::SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datas_(arena),
  removes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.SyncRequest)
}
SyncRequest::SyncRequest(const SyncRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datas_(from.datas_),
      removes_(from.removes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.SyncRequest)
}

inline void SyncRequest::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
}

SyncRequest::~SyncRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.SyncRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SyncRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncRequest::ArenaDtor(void* object) {
  SyncRequest* _this = reinterpret_cast< SyncRequest* >(object);
  (void)_this;
}
void SyncRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.SyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  removes_.Clear();
  ltoken_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.SyncRequest.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .wukong.pb.SyncData datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string removes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_removes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.SyncRequest.removes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.SyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.SyncRequest.lToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ltoken(), target);
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roleid(), target);
  }

  // repeated .wukong.pb.SyncData datas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_datas(i), target, stream);
  }

  // repeated string removes = 5;
  for (int i = 0, n = this->_internal_removes_size(); i < n; i++) {
    const auto& s = this->_internal_removes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.SyncRequest.removes");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.SyncRequest)
  return target;
}

size_t SyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.SyncRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wukong.pb.SyncData datas = 4;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string removes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(removes_.size());
  for (int i = 0, n = removes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      removes_.Get(i));
  }

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncRequest::GetClassData() const { return &_class_data_; }

void SyncRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SyncRequest *>(to)->MergeFrom(
      static_cast<const SyncRequest &>(from));
}


void SyncRequest::MergeFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.SyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  removes_.MergeFrom(from.removes_);
  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncRequest::CopyFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.SyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRequest::IsInitialized() const {
  return true;
}

void SyncRequest::InternalSwap(SyncRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datas_.InternalSwap(&other->datas_);
  removes_.InternalSwap(&other->removes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncRequest, serverid_)
      + sizeof(SyncRequest::serverid_)
      - PROTOBUF_FIELD_OFFSET(SyncRequest, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_record_5fservice_2eproto_getter, &descriptor_table_record_5fservice_2eproto_once,
      file_level_metadata_record_5fservice_2eproto[3]);
}

// ===================================================================

class RSHeartbeatRequest::_Internal {
 public:
};

RSHeartbeatRequest::RSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.RSHeartbeatRequest)
}
RSHeartbeatRequest::RSHeartbeatRequest(const RSHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.RSHeartbeatRequest)
}

inline void RSHeartbeatRequest::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
}

RSHeartbeatRequest::~RSHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.RSHeartbeatRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RSHeartbeatRequest::ArenaDtor(void* object) {
  RSHeartbeatRequest* _this = reinterpret_cast< RSHeartbeatRequest* >(object);
  (void)_this;
}
void RSHeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.RSHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltoken_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.RSHeartbeatRequest.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RSHeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.RSHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint64 roleId = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // string lToken = 3;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.RSHeartbeatRequest.lToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ltoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.RSHeartbeatRequest)
  return target;
}

size_t RSHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.RSHeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lToken = 3;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 roleId = 2;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSHeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSHeartbeatRequest::GetClassData() const { return &_class_data_; }

void RSHeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RSHeartbeatRequest *>(to)->MergeFrom(
      static_cast<const RSHeartbeatRequest &>(from));
}


void RSHeartbeatRequest::MergeFrom(const RSHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.RSHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSHeartbeatRequest::CopyFrom(const RSHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.RSHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSHeartbeatRequest::IsInitialized() const {
  return true;
}

void RSHeartbeatRequest::InternalSwap(RSHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSHeartbeatRequest, serverid_)
      + sizeof(RSHeartbeatRequest::serverid_)
      - PROTOBUF_FIELD_OFFSET(RSHeartbeatRequest, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSHeartbeatRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_record_5fservice_2eproto_getter, &descriptor_table_record_5fservice_2eproto_once,
      file_level_metadata_record_5fservice_2eproto[4]);
}

// ===================================================================

RecordService::~RecordService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RecordService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_record_5fservice_2eproto);
  return file_level_service_descriptors_record_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RecordService::GetDescriptor() {
  return descriptor();
}

void RecordService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void RecordService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::OnlineCounts*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void RecordService::loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::LoadRoleDataRequest*,
                         ::wukong::pb::LoadRoleDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loadRoleData() not implemented.");
  done->Run();
}

void RecordService::sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::SyncRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sync() not implemented.");
  done->Run();
}

void RecordService::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::RSHeartbeatRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heartbeat() not implemented.");
  done->Run();
}

void RecordService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_record_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::OnlineCounts*>(
                 response),
             done);
      break;
    case 2:
      loadRoleData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::LoadRoleDataRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::LoadRoleDataResponse*>(
                 response),
             done);
      break;
    case 3:
      sync(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::SyncRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 4:
      heartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::RSHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RecordService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::corpc::Void::default_instance();
    case 2:
      return ::wukong::pb::LoadRoleDataRequest::default_instance();
    case 3:
      return ::wukong::pb::SyncRequest::default_instance();
    case 4:
      return ::wukong::pb::RSHeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RecordService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::OnlineCounts::default_instance();
    case 2:
      return ::wukong::pb::LoadRoleDataResponse::default_instance();
    case 3:
      return ::wukong::pb::BoolValue::default_instance();
    case 4:
      return ::wukong::pb::BoolValue::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RecordService_Stub::RecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RecordService_Stub::RecordService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RecordService_Stub::~RecordService_Stub() {
  if (owns_channel_) delete channel_;
}

void RecordService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RecordService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::OnlineCounts* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RecordService_Stub::loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::LoadRoleDataRequest* request,
                              ::wukong::pb::LoadRoleDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RecordService_Stub::sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::SyncRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void RecordService_Stub::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::RSHeartbeatRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

InnerRecordService::~InnerRecordService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerRecordService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_record_5fservice_2eproto);
  return file_level_service_descriptors_record_5fservice_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerRecordService::GetDescriptor() {
  return descriptor();
}

void InnerRecordService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void InnerRecordService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::Uint32Value*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void InnerRecordService::loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::LoadRoleDataRequest*,
                         ::wukong::pb::LoadRoleDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loadRoleData() not implemented.");
  done->Run();
}

void InnerRecordService::sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::SyncRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sync() not implemented.");
  done->Run();
}

void InnerRecordService::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::RSHeartbeatRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heartbeat() not implemented.");
  done->Run();
}

void InnerRecordService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_record_5fservice_2eproto[1]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::Uint32Value*>(
                 response),
             done);
      break;
    case 2:
      loadRoleData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::LoadRoleDataRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::LoadRoleDataResponse*>(
                 response),
             done);
      break;
    case 3:
      sync(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::SyncRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 4:
      heartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::RSHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerRecordService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::corpc::Void::default_instance();
    case 2:
      return ::wukong::pb::LoadRoleDataRequest::default_instance();
    case 3:
      return ::wukong::pb::SyncRequest::default_instance();
    case 4:
      return ::wukong::pb::RSHeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerRecordService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::Uint32Value::default_instance();
    case 2:
      return ::wukong::pb::LoadRoleDataResponse::default_instance();
    case 3:
      return ::wukong::pb::BoolValue::default_instance();
    case 4:
      return ::wukong::pb::BoolValue::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InnerRecordService_Stub::InnerRecordService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InnerRecordService_Stub::InnerRecordService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
InnerRecordService_Stub::~InnerRecordService_Stub() {
  if (owns_channel_) delete channel_;
}

void InnerRecordService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void InnerRecordService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::Uint32Value* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void InnerRecordService_Stub::loadRoleData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::LoadRoleDataRequest* request,
                              ::wukong::pb::LoadRoleDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void InnerRecordService_Stub::sync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::SyncRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void InnerRecordService_Stub::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::RSHeartbeatRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wukong::pb::LoadRoleDataRequest* Arena::CreateMaybeMessage< ::wukong::pb::LoadRoleDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::LoadRoleDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::LoadRoleDataResponse* Arena::CreateMaybeMessage< ::wukong::pb::LoadRoleDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::LoadRoleDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::SyncData* Arena::CreateMaybeMessage< ::wukong::pb::SyncData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::SyncData >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::SyncRequest* Arena::CreateMaybeMessage< ::wukong::pb::SyncRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::SyncRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::RSHeartbeatRequest* Arena::CreateMaybeMessage< ::wukong::pb::RSHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::RSHeartbeatRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
