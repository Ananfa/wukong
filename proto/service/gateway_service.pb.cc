// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway_service.proto

#include "gateway_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wukong {
namespace pb {
constexpr KickRequest::KickRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gtoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(uint64_t{0u})
  , serverid_(0u){}
struct KickRequestDefaultTypeInternal {
  constexpr KickRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KickRequestDefaultTypeInternal() {}
  union {
    KickRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KickRequestDefaultTypeInternal _KickRequest_default_instance_;
constexpr ForwardOutTarget::ForwardOutTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(uint64_t{0u}){}
struct ForwardOutTargetDefaultTypeInternal {
  constexpr ForwardOutTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForwardOutTargetDefaultTypeInternal() {}
  union {
    ForwardOutTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForwardOutTargetDefaultTypeInternal _ForwardOutTarget_default_instance_;
constexpr ForwardOutRequest::ForwardOutRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targets_()
  , rawmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverid_(0u)
  , type_(0)
  , tag_(0u){}
struct ForwardOutRequestDefaultTypeInternal {
  constexpr ForwardOutRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForwardOutRequestDefaultTypeInternal() {}
  union {
    ForwardOutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForwardOutRequestDefaultTypeInternal _ForwardOutRequest_default_instance_;
constexpr SetGameObjectPosRequest::SetGameObjectPosRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(uint64_t{0u})
  , roleid_(uint64_t{0u})
  , serverid_(0u)
  , gstype_(0u)
  , gsid_(0u){}
struct SetGameObjectPosRequestDefaultTypeInternal {
  constexpr SetGameObjectPosRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetGameObjectPosRequestDefaultTypeInternal() {}
  union {
    SetGameObjectPosRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetGameObjectPosRequestDefaultTypeInternal _SetGameObjectPosRequest_default_instance_;
constexpr GSHeartbeatRequest::GSHeartbeatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ltoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(uint64_t{0u})
  , serverid_(0u){}
struct GSHeartbeatRequestDefaultTypeInternal {
  constexpr GSHeartbeatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GSHeartbeatRequestDefaultTypeInternal() {}
  union {
    GSHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GSHeartbeatRequestDefaultTypeInternal _GSHeartbeatRequest_default_instance_;
}  // namespace pb
}  // namespace wukong
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gateway_5fservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gateway_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_gateway_5fservice_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gateway_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::KickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::KickRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::KickRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::KickRequest, gtoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutTarget, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutTarget, ltoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, type_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, tag_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, targets_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::ForwardOutRequest, rawmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, roleid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, ltoken_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, gstype_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::SetGameObjectPosRequest, gsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::GSHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wukong::pb::GSHeartbeatRequest, serverid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::GSHeartbeatRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::wukong::pb::GSHeartbeatRequest, ltoken_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wukong::pb::KickRequest)},
  { 8, -1, sizeof(::wukong::pb::ForwardOutTarget)},
  { 15, -1, sizeof(::wukong::pb::ForwardOutRequest)},
  { 25, -1, sizeof(::wukong::pb::SetGameObjectPosRequest)},
  { 36, -1, sizeof(::wukong::pb::GSHeartbeatRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_KickRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_ForwardOutTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_ForwardOutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_SetGameObjectPosRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wukong::pb::_GSHeartbeatRequest_default_instance_),
};

const char descriptor_table_protodef_gateway_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025gateway_service.proto\022\twukong.pb\032\022corp"
  "c_option.proto\032\014common.proto\032\022inner_comm"
  "on.proto\"\?\n\013KickRequest\022\020\n\010serverId\030\001 \001("
  "\r\022\016\n\006userId\030\002 \001(\004\022\016\n\006gToken\030\003 \001(\t\"2\n\020For"
  "wardOutTarget\022\016\n\006userId\030\001 \001(\004\022\016\n\006lToken\030"
  "\002 \001(\t\"~\n\021ForwardOutRequest\022\020\n\010serverId\030\001"
  " \001(\r\022\014\n\004type\030\002 \001(\005\022\013\n\003tag\030\003 \001(\r\022,\n\007targe"
  "ts\030\004 \003(\0132\033.wukong.pb.ForwardOutTarget\022\016\n"
  "\006rawMsg\030\005 \001(\014\"y\n\027SetGameObjectPosRequest"
  "\022\020\n\010serverId\030\001 \001(\r\022\016\n\006userId\030\002 \001(\004\022\016\n\006ro"
  "leId\030\003 \001(\004\022\016\n\006lToken\030\004 \001(\t\022\016\n\006gsType\030\005 \001"
  "(\r\022\014\n\004gsId\030\006 \001(\r\"F\n\022GSHeartbeatRequest\022\020"
  "\n\010serverId\030\001 \001(\r\022\016\n\006userId\030\002 \001(\004\022\016\n\006lTok"
  "en\030\003 \001(\t2\245\003\n\016GatewayService\022*\n\010shutdown\022"
  "\013.corpc.Void\032\013.corpc.Void\"\004\230\361\004\001\022:\n\004kick\022"
  "\026.wukong.pb.KickRequest\032\024.wukong.pb.Bool"
  "Value\"\004\220\361\004\001\022A\n\016getOnlineCount\022\013.corpc.Vo"
  "id\032\027.wukong.pb.OnlineCounts\"\t\220\361\004\001\240\361\004\320\017\022A"
  "\n\nforwardOut\022\034.wukong.pb.ForwardOutReque"
  "st\032\013.corpc.Void\"\010\230\361\004\001\250\361\004\001\022R\n\020setGameObje"
  "ctPos\022\".wukong.pb.SetGameObjectPosReques"
  "t\032\024.wukong.pb.BoolValue\"\004\220\361\004\001\022K\n\theartbe"
  "at\022\035.wukong.pb.GSHeartbeatRequest\032\024.wuko"
  "ng.pb.BoolValue\"\t\220\361\004\001\240\361\004\320\017\032\004\200\361\004\0012\227\003\n\023Inn"
  "erGatewayService\022*\n\010shutdown\022\013.corpc.Voi"
  "d\032\013.corpc.Void\"\004\230\361\004\001\022:\n\004kick\022\026.wukong.pb"
  ".KickRequest\032\024.wukong.pb.BoolValue\"\004\220\361\004\001"
  "\022<\n\016getOnlineCount\022\013.corpc.Void\032\026.wukong"
  ".pb.Uint32Value\"\005\240\361\004\364\003\022=\n\nforwardOut\022\034.w"
  "ukong.pb.ForwardOutRequest\032\013.corpc.Void\""
  "\004\230\361\004\001\022L\n\020setGameObjectPos\022\".wukong.pb.Se"
  "tGameObjectPosRequest\032\024.wukong.pb.BoolVa"
  "lue\022G\n\theartbeat\022\035.wukong.pb.GSHeartbeat"
  "Request\032\024.wukong.pb.BoolValue\"\005\240\361\004\320\017\032\004\200\361"
  "\004\001B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gateway_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_corpc_5foption_2eproto,
  &::descriptor_table_inner_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gateway_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_5fservice_2eproto = {
  false, false, 1375, descriptor_table_protodef_gateway_5fservice_2eproto, "gateway_service.proto", 
  &descriptor_table_gateway_5fservice_2eproto_once, descriptor_table_gateway_5fservice_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_gateway_5fservice_2eproto::offsets,
  file_level_metadata_gateway_5fservice_2eproto, file_level_enum_descriptors_gateway_5fservice_2eproto, file_level_service_descriptors_gateway_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gateway_5fservice_2eproto_getter() {
  return &descriptor_table_gateway_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gateway_5fservice_2eproto(&descriptor_table_gateway_5fservice_2eproto);
namespace wukong {
namespace pb {

// ===================================================================

class KickRequest::_Internal {
 public:
};

KickRequest::KickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.KickRequest)
}
KickRequest::KickRequest(const KickRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gtoken().empty()) {
    gtoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gtoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.KickRequest)
}

inline void KickRequest::SharedCtor() {
gtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
}

KickRequest::~KickRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.KickRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KickRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickRequest::ArenaDtor(void* object) {
  KickRequest* _this = reinterpret_cast< KickRequest* >(object);
  (void)_this;
}
void KickRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.KickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gtoken_.ClearToEmpty();
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.KickRequest.gToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.KickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // string gToken = 3;
  if (!this->_internal_gtoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gtoken().data(), static_cast<int>(this->_internal_gtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.KickRequest.gToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.KickRequest)
  return target;
}

size_t KickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.KickRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gToken = 3;
  if (!this->_internal_gtoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gtoken());
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KickRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickRequest::GetClassData() const { return &_class_data_; }

void KickRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<KickRequest *>(to)->MergeFrom(
      static_cast<const KickRequest &>(from));
}


void KickRequest::MergeFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.KickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gtoken().empty()) {
    _internal_set_gtoken(from._internal_gtoken());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickRequest::CopyFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.KickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickRequest::IsInitialized() const {
  return true;
}

void KickRequest::InternalSwap(KickRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gtoken_, GetArenaForAllocation(),
      &other->gtoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickRequest, serverid_)
      + sizeof(KickRequest::serverid_)
      - PROTOBUF_FIELD_OFFSET(KickRequest, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gateway_5fservice_2eproto_getter, &descriptor_table_gateway_5fservice_2eproto_once,
      file_level_metadata_gateway_5fservice_2eproto[0]);
}

// ===================================================================

class ForwardOutTarget::_Internal {
 public:
};

ForwardOutTarget::ForwardOutTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.ForwardOutTarget)
}
ForwardOutTarget::ForwardOutTarget(const ForwardOutTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:wukong.pb.ForwardOutTarget)
}

inline void ForwardOutTarget::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_ = uint64_t{0u};
}

ForwardOutTarget::~ForwardOutTarget() {
  // @@protoc_insertion_point(destructor:wukong.pb.ForwardOutTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ForwardOutTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ForwardOutTarget::ArenaDtor(void* object) {
  ForwardOutTarget* _this = reinterpret_cast< ForwardOutTarget* >(object);
  (void)_this;
}
void ForwardOutTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForwardOutTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardOutTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.ForwardOutTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltoken_.ClearToEmpty();
  userid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardOutTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.ForwardOutTarget.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardOutTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.ForwardOutTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.ForwardOutTarget.lToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ltoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.ForwardOutTarget)
  return target;
}

size_t ForwardOutTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.ForwardOutTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lToken = 2;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 userId = 1;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardOutTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardOutTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardOutTarget::GetClassData() const { return &_class_data_; }

void ForwardOutTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ForwardOutTarget *>(to)->MergeFrom(
      static_cast<const ForwardOutTarget &>(from));
}


void ForwardOutTarget::MergeFrom(const ForwardOutTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.ForwardOutTarget)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardOutTarget::CopyFrom(const ForwardOutTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.ForwardOutTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardOutTarget::IsInitialized() const {
  return true;
}

void ForwardOutTarget::InternalSwap(ForwardOutTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardOutTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gateway_5fservice_2eproto_getter, &descriptor_table_gateway_5fservice_2eproto_once,
      file_level_metadata_gateway_5fservice_2eproto[1]);
}

// ===================================================================

class ForwardOutRequest::_Internal {
 public:
};

ForwardOutRequest::ForwardOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  targets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.ForwardOutRequest)
}
ForwardOutRequest::ForwardOutRequest(const ForwardOutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rawmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rawmsg().empty()) {
    rawmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rawmsg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.ForwardOutRequest)
}

inline void ForwardOutRequest::SharedCtor() {
rawmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serverid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(tag_));
}

ForwardOutRequest::~ForwardOutRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.ForwardOutRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ForwardOutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rawmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ForwardOutRequest::ArenaDtor(void* object) {
  ForwardOutRequest* _this = reinterpret_cast< ForwardOutRequest* >(object);
  (void)_this;
}
void ForwardOutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForwardOutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.ForwardOutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  rawmsg_.ClearToEmpty();
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardOutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .wukong.pb.ForwardOutTarget targets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes rawMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rawmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardOutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.ForwardOutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 tag = 3;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tag(), target);
  }

  // repeated .wukong.pb.ForwardOutTarget targets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_targets(i), target, stream);
  }

  // bytes rawMsg = 5;
  if (!this->_internal_rawmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rawmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.ForwardOutRequest)
  return target;
}

size_t ForwardOutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.ForwardOutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wukong.pb.ForwardOutTarget targets = 4;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes rawMsg = 5;
  if (!this->_internal_rawmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawmsg());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // uint32 tag = 3;
  if (this->_internal_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardOutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardOutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardOutRequest::GetClassData() const { return &_class_data_; }

void ForwardOutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ForwardOutRequest *>(to)->MergeFrom(
      static_cast<const ForwardOutRequest &>(from));
}


void ForwardOutRequest::MergeFrom(const ForwardOutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.ForwardOutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (!from._internal_rawmsg().empty()) {
    _internal_set_rawmsg(from._internal_rawmsg());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardOutRequest::CopyFrom(const ForwardOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.ForwardOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardOutRequest::IsInitialized() const {
  return true;
}

void ForwardOutRequest::InternalSwap(ForwardOutRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rawmsg_, GetArenaForAllocation(),
      &other->rawmsg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForwardOutRequest, tag_)
      + sizeof(ForwardOutRequest::tag_)
      - PROTOBUF_FIELD_OFFSET(ForwardOutRequest, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardOutRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gateway_5fservice_2eproto_getter, &descriptor_table_gateway_5fservice_2eproto_once,
      file_level_metadata_gateway_5fservice_2eproto[2]);
}

// ===================================================================

class SetGameObjectPosRequest::_Internal {
 public:
};

SetGameObjectPosRequest::SetGameObjectPosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.SetGameObjectPosRequest)
}
SetGameObjectPosRequest::SetGameObjectPosRequest(const SetGameObjectPosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gsid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(gsid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.SetGameObjectPosRequest)
}

inline void SetGameObjectPosRequest::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gsid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(gsid_));
}

SetGameObjectPosRequest::~SetGameObjectPosRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.SetGameObjectPosRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetGameObjectPosRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetGameObjectPosRequest::ArenaDtor(void* object) {
  SetGameObjectPosRequest* _this = reinterpret_cast< SetGameObjectPosRequest* >(object);
  (void)_this;
}
void SetGameObjectPosRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetGameObjectPosRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetGameObjectPosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.SetGameObjectPosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltoken_.ClearToEmpty();
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gsid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(gsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetGameObjectPosRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.SetGameObjectPosRequest.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gsType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gsId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetGameObjectPosRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.SetGameObjectPosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roleid(), target);
  }

  // string lToken = 4;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.SetGameObjectPosRequest.lToken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ltoken(), target);
  }

  // uint32 gsType = 5;
  if (this->_internal_gstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gstype(), target);
  }

  // uint32 gsId = 6;
  if (this->_internal_gsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.SetGameObjectPosRequest)
  return target;
}

size_t SetGameObjectPosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.SetGameObjectPosRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lToken = 4;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint64 roleId = 3;
  if (this->_internal_roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // uint32 gsType = 5;
  if (this->_internal_gstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gstype());
  }

  // uint32 gsId = 6;
  if (this->_internal_gsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetGameObjectPosRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetGameObjectPosRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetGameObjectPosRequest::GetClassData() const { return &_class_data_; }

void SetGameObjectPosRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetGameObjectPosRequest *>(to)->MergeFrom(
      static_cast<const SetGameObjectPosRequest &>(from));
}


void SetGameObjectPosRequest::MergeFrom(const SetGameObjectPosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.SetGameObjectPosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_gstype() != 0) {
    _internal_set_gstype(from._internal_gstype());
  }
  if (from._internal_gsid() != 0) {
    _internal_set_gsid(from._internal_gsid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetGameObjectPosRequest::CopyFrom(const SetGameObjectPosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.SetGameObjectPosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGameObjectPosRequest::IsInitialized() const {
  return true;
}

void SetGameObjectPosRequest::InternalSwap(SetGameObjectPosRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetGameObjectPosRequest, gsid_)
      + sizeof(SetGameObjectPosRequest::gsid_)
      - PROTOBUF_FIELD_OFFSET(SetGameObjectPosRequest, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetGameObjectPosRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gateway_5fservice_2eproto_getter, &descriptor_table_gateway_5fservice_2eproto_once,
      file_level_metadata_gateway_5fservice_2eproto[3]);
}

// ===================================================================

class GSHeartbeatRequest::_Internal {
 public:
};

GSHeartbeatRequest::GSHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wukong.pb.GSHeartbeatRequest)
}
GSHeartbeatRequest::GSHeartbeatRequest(const GSHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ltoken().empty()) {
    ltoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ltoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:wukong.pb.GSHeartbeatRequest)
}

inline void GSHeartbeatRequest::SharedCtor() {
ltoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
}

GSHeartbeatRequest::~GSHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:wukong.pb.GSHeartbeatRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GSHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ltoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GSHeartbeatRequest::ArenaDtor(void* object) {
  GSHeartbeatRequest* _this = reinterpret_cast< GSHeartbeatRequest* >(object);
  (void)_this;
}
void GSHeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GSHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GSHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wukong.pb.GSHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltoken_.ClearToEmpty();
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GSHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ltoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wukong.pb.GSHeartbeatRequest.lToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GSHeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wukong.pb.GSHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // string lToken = 3;
  if (!this->_internal_ltoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ltoken().data(), static_cast<int>(this->_internal_ltoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wukong.pb.GSHeartbeatRequest.lToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ltoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wukong.pb.GSHeartbeatRequest)
  return target;
}

size_t GSHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wukong.pb.GSHeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lToken = 3;
  if (!this->_internal_ltoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ltoken());
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GSHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GSHeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GSHeartbeatRequest::GetClassData() const { return &_class_data_; }

void GSHeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GSHeartbeatRequest *>(to)->MergeFrom(
      static_cast<const GSHeartbeatRequest &>(from));
}


void GSHeartbeatRequest::MergeFrom(const GSHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wukong.pb.GSHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ltoken().empty()) {
    _internal_set_ltoken(from._internal_ltoken());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GSHeartbeatRequest::CopyFrom(const GSHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wukong.pb.GSHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSHeartbeatRequest::IsInitialized() const {
  return true;
}

void GSHeartbeatRequest::InternalSwap(GSHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ltoken_, GetArenaForAllocation(),
      &other->ltoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GSHeartbeatRequest, serverid_)
      + sizeof(GSHeartbeatRequest::serverid_)
      - PROTOBUF_FIELD_OFFSET(GSHeartbeatRequest, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GSHeartbeatRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gateway_5fservice_2eproto_getter, &descriptor_table_gateway_5fservice_2eproto_once,
      file_level_metadata_gateway_5fservice_2eproto[4]);
}

// ===================================================================

GatewayService::~GatewayService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GatewayService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gateway_5fservice_2eproto);
  return file_level_service_descriptors_gateway_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GatewayService::GetDescriptor() {
  return descriptor();
}

void GatewayService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void GatewayService::kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::KickRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method kick() not implemented.");
  done->Run();
}

void GatewayService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::OnlineCounts*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void GatewayService::forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::ForwardOutRequest*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method forwardOut() not implemented.");
  done->Run();
}

void GatewayService::setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::SetGameObjectPosRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setGameObjectPos() not implemented.");
  done->Run();
}

void GatewayService::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::GSHeartbeatRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heartbeat() not implemented.");
  done->Run();
}

void GatewayService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_gateway_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      kick(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::KickRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 2:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::OnlineCounts*>(
                 response),
             done);
      break;
    case 3:
      forwardOut(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::ForwardOutRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 4:
      setGameObjectPos(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::SetGameObjectPosRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 5:
      heartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::GSHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GatewayService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::KickRequest::default_instance();
    case 2:
      return ::corpc::Void::default_instance();
    case 3:
      return ::wukong::pb::ForwardOutRequest::default_instance();
    case 4:
      return ::wukong::pb::SetGameObjectPosRequest::default_instance();
    case 5:
      return ::wukong::pb::GSHeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GatewayService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::BoolValue::default_instance();
    case 2:
      return ::wukong::pb::OnlineCounts::default_instance();
    case 3:
      return ::corpc::Void::default_instance();
    case 4:
      return ::wukong::pb::BoolValue::default_instance();
    case 5:
      return ::wukong::pb::BoolValue::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GatewayService_Stub::GatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GatewayService_Stub::GatewayService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GatewayService_Stub::~GatewayService_Stub() {
  if (owns_channel_) delete channel_;
}

void GatewayService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GatewayService_Stub::kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::KickRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GatewayService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::OnlineCounts* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GatewayService_Stub::forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::ForwardOutRequest* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GatewayService_Stub::setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::SetGameObjectPosRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GatewayService_Stub::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::GSHeartbeatRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

InnerGatewayService::~InnerGatewayService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerGatewayService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gateway_5fservice_2eproto);
  return file_level_service_descriptors_gateway_5fservice_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InnerGatewayService::GetDescriptor() {
  return descriptor();
}

void InnerGatewayService::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method shutdown() not implemented.");
  done->Run();
}

void InnerGatewayService::kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::KickRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method kick() not implemented.");
  done->Run();
}

void InnerGatewayService::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::corpc::Void*,
                         ::wukong::pb::Uint32Value*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getOnlineCount() not implemented.");
  done->Run();
}

void InnerGatewayService::forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::ForwardOutRequest*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method forwardOut() not implemented.");
  done->Run();
}

void InnerGatewayService::setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::SetGameObjectPosRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setGameObjectPos() not implemented.");
  done->Run();
}

void InnerGatewayService::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::wukong::pb::GSHeartbeatRequest*,
                         ::wukong::pb::BoolValue*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heartbeat() not implemented.");
  done->Run();
}

void InnerGatewayService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_gateway_5fservice_2eproto[1]);
  switch(method->index()) {
    case 0:
      shutdown(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 1:
      kick(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::KickRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 2:
      getOnlineCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::corpc::Void*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::Uint32Value*>(
                 response),
             done);
      break;
    case 3:
      forwardOut(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::ForwardOutRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::corpc::Void*>(
                 response),
             done);
      break;
    case 4:
      setGameObjectPos(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::SetGameObjectPosRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    case 5:
      heartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::wukong::pb::GSHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::wukong::pb::BoolValue*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerGatewayService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::KickRequest::default_instance();
    case 2:
      return ::corpc::Void::default_instance();
    case 3:
      return ::wukong::pb::ForwardOutRequest::default_instance();
    case 4:
      return ::wukong::pb::SetGameObjectPosRequest::default_instance();
    case 5:
      return ::wukong::pb::GSHeartbeatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InnerGatewayService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::wukong::pb::BoolValue::default_instance();
    case 2:
      return ::wukong::pb::Uint32Value::default_instance();
    case 3:
      return ::corpc::Void::default_instance();
    case 4:
      return ::wukong::pb::BoolValue::default_instance();
    case 5:
      return ::wukong::pb::BoolValue::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InnerGatewayService_Stub::InnerGatewayService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InnerGatewayService_Stub::InnerGatewayService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
InnerGatewayService_Stub::~InnerGatewayService_Stub() {
  if (owns_channel_) delete channel_;
}

void InnerGatewayService_Stub::shutdown(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void InnerGatewayService_Stub::kick(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::KickRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void InnerGatewayService_Stub::getOnlineCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::corpc::Void* request,
                              ::wukong::pb::Uint32Value* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void InnerGatewayService_Stub::forwardOut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::ForwardOutRequest* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void InnerGatewayService_Stub::setGameObjectPos(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::SetGameObjectPosRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void InnerGatewayService_Stub::heartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::wukong::pb::GSHeartbeatRequest* request,
                              ::wukong::pb::BoolValue* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace wukong
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wukong::pb::KickRequest* Arena::CreateMaybeMessage< ::wukong::pb::KickRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::KickRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::ForwardOutTarget* Arena::CreateMaybeMessage< ::wukong::pb::ForwardOutTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::ForwardOutTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::ForwardOutRequest* Arena::CreateMaybeMessage< ::wukong::pb::ForwardOutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::ForwardOutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::SetGameObjectPosRequest* Arena::CreateMaybeMessage< ::wukong::pb::SetGameObjectPosRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::SetGameObjectPosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wukong::pb::GSHeartbeatRequest* Arena::CreateMaybeMessage< ::wukong::pb::GSHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wukong::pb::GSHeartbeatRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
