syntax = "proto3";

import "corpc_option.proto";
import "common.proto";
//import "inner_common.proto";

option cc_generic_services = true;

package wukong.pb;

message KickRequest {
    uint32 serverId = 1;
    uint64 userId = 2;
    string gToken = 3;
}

message ForwardOutTarget {
    uint64 userId = 1;
    string lToken = 2;
}

message ForwardOutRequest {
    uint32 serverId = 1; // 为0表示广播给所有服，此时request中的targets应为空
    int32 type = 2; // 消息类型
    uint32 tag = 3; // 消息tag（用于客户端与服务器RPC）
    repeated ForwardOutTarget targets = 4; // 发送目标（注意：目标列表为空时表示广播所有玩家）
    bytes rawMsg = 5; // 原始消息数据
}

//message SetGameObjectPosRequest {
//    uint32 serverId = 1;
//    uint64 userId = 2;
//    uint64 roleId = 3;
//    string lToken = 4;
//    uint32 gsType = 5;
//    uint32 gsId = 6;
//}

message GSHeartbeatRequest {
    uint32 serverId = 1;
    uint64 userId = 2;
    string lToken = 3;
}

service GatewayService {
	option (corpc.global_service_id) = 1;

    // 关服（关闭Gateway后，内部服务中的游戏对象会在心跳失败时销毁并存盘，因此只需对gateway进行shutdown）
    rpc shutdown(corpc.Void) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
    }

    // 踢出指定玩家
    rpc kick(KickRequest) returns(BoolValue)
    {
        option (corpc.need_coroutine) = true;
    }

    // 获取在线玩家数，用于负载均衡（超时时间2秒，超时表示该网关负载过高，后续不被继续分配）
    //rpc getOnlineCount(corpc.Void) returns(Uint32Value)
    //{
    //    //option (corpc.need_coroutine) = true;
    //    option (corpc.timeout) = 2000;
    //}

    rpc forwardOut(ForwardOutRequest) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
        //option (corpc.delete_in_done) = true;
    }

    // 设置游戏对象位置（切场景时位置会改变）
    //rpc setGameObjectPos(SetGameObjectPosRequest) returns(BoolValue);
    //{
    //    option (corpc.need_coroutine) = true;
    //}

    // 玩家游戏对象向路由对象定时心跳查看路由对象是否存在（超时时间2秒，负载过高心跳失败导致游戏对象销毁）
    rpc heartbeat(GSHeartbeatRequest) returns(BoolValue)
    {
        //option (corpc.need_coroutine) = true;
        option (corpc.timeout) = 2000;
    }

}

//service InnerGatewayService {
//    option (corpc.global_service_id) = 1;
//    
//    // 关服（关闭Gateway后，内部服务中的游戏对象会在心跳失败时销毁并存盘，因此只需对gateway进行shutdown）
//    rpc shutdown(corpc.Void) returns(corpc.Void)
//    {
//        option (corpc.not_care_response) = true;
//    }
//
//    // 踢出指定玩家
//    rpc kick(KickRequest) returns(BoolValue)
//    {
//        option (corpc.need_coroutine) = true;
//    }
//
//    // 获取在线玩家数，用于负载均衡
//    rpc getOnlineCount(corpc.Void) returns(Uint32Value)
//    {
//        option (corpc.timeout) = 500; // default is 0
//    }
//
//    rpc forwardOut(ForwardOutRequest) returns(corpc.Void)
//    {
//        option (corpc.not_care_response) = true;
//    }
//
//    // 设置游戏对象位置（切场景时位置会改变）
//    rpc setGameObjectPos(SetGameObjectPosRequest) returns(BoolValue);
//
//    // 玩家游戏对象向路由对象定时心跳查看路由对象是否存在（超时时间2秒，负载过高心跳失败导致游戏对象销毁）
//    rpc heartbeat(GSHeartbeatRequest) returns(BoolValue)
//    {
//        option (corpc.timeout) = 2000;
//    }
//
//}