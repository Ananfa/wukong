syntax = "proto3";

import "corpc_option.proto";
import "common.proto";
import "inner_common.proto";

option cc_generic_services = true;

package wukong.pb;

message LoadSceneRequest {
    uint32 serverId = 1; // 物理服编号
    uint32 defId = 2; // 场景定义号
    string sceneId = 3; // 场景实例号
    uint32 roleId = 4; // 对于个人场景需要带上角色id（个人场景加载时会自动加载角色游戏对象），非个人场景则不填
    string teamId = 5; // 对于需要同时加载所有队伍成员进场景的队伍场景需要提供队伍号
}

message LoadSceneResponse {
    uint32 errCode = 1;
    string sceneId = 2;
}

message EnterSceneRequest {
    uint32 serverId = 1; // 物理服编号
    uint32 userId = 2;
    uint32 roleId = 3;
    uint32 gatewayId = 4;
    string sceneId = 5;
}

// 玩家游戏对象所在服务器需要实现GameService服务
// 注意：
//      不需要卸载场景接口，由场景自己控制何时卸载
//      不需要离开场景接口，由场景内逻辑控制角色离开场景
//      不需要创建场景接口，由其他功能创建场景数据库数据然后调用场景服加载场景
service SceneService {
    option (corpc.global_service_id) = 5;

    // 关闭场景服
    rpc shutdown(corpc.Void) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
    }

    // 获取在线玩家数，用于负载均衡（超时时间1秒，超时表示负载过高）
    rpc getOnlineCount(corpc.Void) returns(OnlineCounts)
    {
        option (corpc.need_coroutine) = true; // default is false
        option (corpc.timeout) = 1000; // default is 0
    }

    // 加载场景
    rpc loadScene(LoadSceneRequest) returns(LoadSceneResponse)
    {
        option (corpc.need_coroutine) = true;
    }

    // 进入场景
    rpc enterScene(EnterSceneRequest) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
        option (corpc.delete_in_done) = true;
    }

}

service InnerSceneService {
    option (corpc.global_service_id) = 5;

    // 关闭场景服
    rpc shutdown(corpc.Void) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
    }

    // 获取在线玩家数，用于负载均衡（超时时间1秒，超时表示负载过高）
    rpc getOnlineCount(corpc.Void) returns(Uint32Value)
    {
        option (corpc.timeout) = 500; // default is 0
    }

    // 加载场景
    rpc loadScene(LoadSceneRequest) returns(LoadSceneResponse)
    {
        option (corpc.need_coroutine) = true;
    }

    // 进入场景
    rpc enterScene(EnterSceneRequest) returns(corpc.Void)
    {
        option (corpc.not_care_response) = true;
        option (corpc.need_coroutine) = true;
    }
}